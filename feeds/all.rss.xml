<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>alyssa frazee</title><link>http://alyssafrazee.com/</link><description></description><atom:link href="alyssafrazee.com/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 06 Mar 2014 16:15:00 -0500</lastBuildDate><item><title>Skittle-themed color schemes for R graphics with RSkittleBrewer!</title><link>http://alyssafrazee.com/RSkittleBrewer.html</link><description>&lt;p&gt;Choosing the perfect set of colors for a plot is hard.  But people have thought a lot about this problem, and there are solutions!  If you're an R user looking for publication-quality color schemes that are backed by lots of scientific research, check out &lt;a href="http://cran.r-project.org/web/packages/RColorBrewer/index.html"&gt;RColorBrewer&lt;/a&gt;, or use the color schemes in &lt;a href="http://ggplot2.org/"&gt;ggplot2&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If, on the other hand, you're looking for a color scheme that reminds you of a bag of Skittles, check out &lt;a href="https://github.com/alyssafrazee/RSkittleBrewer"&gt;RSkittleBrewer&lt;/a&gt;. This is a tiny R package I wrote yesterday to generate vectors of valid R color names for certain Skittle flavors. You can also generate a vector of M&amp;amp;M colors, if (like me) you're more into chocolate.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/alyssafrazee/RSkittleBrewer"&gt;The code is on GitHub&lt;/a&gt;. Here's how you use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;devtools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;install_github&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;RSkittleBrewer&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;alyssafrazee&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSkittleBrewer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tropical&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSkittleBrewer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;tropical&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;wildberry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSkittleBrewer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;wildberry&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSkittleBrewer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if you want to see how the colors actually look, you can make a plot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;plotSkittles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will look like this:&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img src="static/images/skittles.png" alt="Image"/&gt;
&lt;/p&gt;

&lt;p&gt;This work was inspired and supported by my mentors at &lt;a href="http://simplystatistics.org/"&gt;Simply Statistics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy making candy-themed R graphics!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 06 Mar 2014 16:15:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-03-06:RSkittleBrewer.html</guid></item><item><title>thoughts on error messages</title><link>http://alyssafrazee.com/errors.html</link><description>&lt;p&gt;I've encountered a few hilariously useless error messages while coding recently.  They got me thinking about error messages in general and wondering about the best way to build good error messages into my own software. &lt;/p&gt;
&lt;p&gt;Some hilarious messages I've seen:&lt;/p&gt;
&lt;h4&gt;Error in listClassName("Compressed", class(x)) : Could not find a 'CompressedList' subclass for values of type 'GRangesListCompressedListGenomicRangesListGenomicRangesORGRangesListListVectorAnnotated'&lt;/h4&gt;
&lt;p&gt;Holy long type name, Batman! This is an R error.  I was super confused because I have never EVER created, used, or seen an R object of type GRangesListCompressedListGenomicRangesListGenomicRangesORGRangesListListVectorAnnotated because &lt;em&gt;that's a ridiculous name for a class&lt;/em&gt;. The problem was &lt;em&gt;actually&lt;/em&gt; that I was trying to call the function &lt;code&gt;split&lt;/code&gt; on an object of class &lt;code&gt;GRangesList&lt;/code&gt;, but the &lt;code&gt;GRangesList&lt;/code&gt; class doesn't have a split method.  It might be hard to implement a better message, since &lt;code&gt;split&lt;/code&gt; is a generic function and object-oriented programming in R is not the best, but hey, I like to dream big. &lt;/p&gt;
&lt;h4&gt;Trap 66&lt;/h4&gt;
&lt;p&gt;This is the best/worst error message I've ever gotten in my life. I got it in 2011 when I was fitting an MCMC using &lt;a href="http://www.mrc-bsu.cam.ac.uk/bugs/winbugs/contents.shtml"&gt;WinBUGS&lt;/a&gt;.  What I love about this error message is that it doesn't say the word ERROR anywhere in it.  It just came up in a little dialog box with an "OK" button, so I clicked OK and results happened.  I didn't even realize anything had gone wrong for like half an hour.  When my friend told me this was an error message, I tried to fix it by &lt;a href="http://aurelienmadouasse.wordpress.com/2011/02/14/the-mysterious-trap-66-postcondition-violated/"&gt;changing some of my prior distributions&lt;/a&gt;.  When that didn't work, I got really angry and became a frequentist&lt;sup&gt;1&lt;/sup&gt;. &lt;/p&gt;
&lt;h4&gt;Error: bad restore file magic number (file may be corrupted) -- no data loaded. In addition: warning message: file 'yourfile' has magic number 'chr1'&lt;/h4&gt;
&lt;p&gt;I had to look up what a "&lt;a href="http://bit.ly/NhwdRt"&gt;magic number&lt;/a&gt;" is. I don't completely understand it yet. I'd bet that only a tiny proportion of R users know what a magic number is.  The likely problem here is that the user is loading a data file the wrong way.  To be more specific: usually you use &lt;code&gt;load()&lt;/code&gt; to load a workspace (a .rda or .RData file), &lt;code&gt;source()&lt;/code&gt; to run a previously-saved script, and &lt;code&gt;read.table()&lt;/code&gt; to read in data from some delimited file.  The magic number error pops up if you use the wrong one of these commands for your data type. I saw it when a friend of mine ran &lt;code&gt;load()&lt;/code&gt; on a data file instead of &lt;code&gt;read.table()&lt;/code&gt;. I feel like this error message would be better if it said something like "error: incorrect file type for function, or corrupt file." &lt;/p&gt;
&lt;h4&gt;Error: negative-length vectors not allowed&lt;/h4&gt;
&lt;p&gt;So many questions here!  What on earth is a negative-length vector?  How do I make one?  What would I do with it?  Are they crucial to our existence, like imaginary numbers?  Anyway, joking aside -- &lt;a href="http://lmgtfy.com/?q=negative+length+vectors+are+not+allowed"&gt;a quick Google search&lt;/a&gt; will tell you that this is the error you get in R when you try to make a vector with a length of 2^31 or more.  Great!  I can fix that.  I probably could have fixed it faster if the error message just said "YO you're making a vector with more than 2^31 - 1 entries" rather than harping on about a negative length.&lt;/p&gt;
&lt;h4&gt;thoughts&lt;/h4&gt;
&lt;p&gt;In addition to making me laugh and really confusing me, these got me thinking about error messages in general, from both from the software-user and software-creator perspective. As a user, I'm frustrated by error messages like these: they tell me about symptoms, but not causes. They tell me that there is a problem, but don't give me clues about how to start solving it&lt;sup&gt;2&lt;/sup&gt;. But as a programmer, it's really hard to anticipate every possible thing that might go wrong with a given function and write an informative error message for each of those things. I've often chosen not to built error messages into my own functions, relying instead on my functions' &lt;em&gt;internal&lt;/em&gt; functions to throw errors, but I think that's probably how error messages become uninformative in the first place, especially in complex/nested function calls.  &lt;/p&gt;
&lt;p&gt;The problem is that it's hard to have a user mindset for software I've written myself.  I'm too deep in and can't anticipate enough of the ways users might break things.  I'm starting to think that the best way to make user-friendly software is to (a) write the software, (b) brace yourself, (c) recruit some people that weren't involved in the development to use your software and give you feedback, and (d) fix all the problems they have with the software. Let &lt;em&gt;them&lt;/em&gt; break things, and then &lt;em&gt;you&lt;/em&gt; fix all the broken stuff! This process is described in &lt;a href="http://blog.codinghorror.com/complaint-driven-development/"&gt;this blog post about "complaint-driven development"&lt;/a&gt;. I've been finding that it works on a smaller scale too: one of my current projects is a software package, and two colleagues have used it for data analysis and told me about all the weird problems they encountered. I never would have anticipated those without them, and I've been able to improve the error messages because of them -- and that's only &lt;em&gt;two test users&lt;/em&gt;!  I think that if I really want this project to have great error messages, I just need to get more people to break it and give feedback on the messages. &lt;/p&gt;
&lt;h4&gt;footnotes&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Just kidding. I don't actually believe in frequentist/Bayesian dogma. And if I were a frequentist, it would only &lt;em&gt;partially&lt;/em&gt; be because of how much I dislike WinBUGS.   &lt;/li&gt;
&lt;li&gt;As a user, I'm also appreciative of good error messages. The Python folks at Hacker School were always waxing poetic about how awesome Python error messages are. The more I use Python, the more I agree. I like that Python errors have types, so you at least get one hint as to what's happening. The error types also make it so you can illustrate the Python debugging process with a &lt;a href="http://i.imgur.com/WRuJV6r.png"&gt;beautiful flowchart&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Sun, 02 Mar 2014 10:30:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-03-02:errors.html</guid></item><item><title>recent blogosphere highlights {part 2}</title><link>http://alyssafrazee.com/favorite-blog-posts-2.html</link><description>&lt;p&gt;Here's part 2 in my series on fantastic blog posts written by other people! &lt;a href="http://alyssafrazee.com/favorite-blog-posts.html"&gt;See part 1&lt;/a&gt; for more favorites.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gigamonkeys.com/code-reading/"&gt;Peter Seibel proposes an approach to code reading&lt;/a&gt; that doesn't treat pieces of code like literature. Some people make the following argument: you would &lt;em&gt;never&lt;/em&gt; meet a novelist - a writer of novels - that didn't read novels. Nor should we ever meet programmers - writers of code - who &lt;em&gt;never read code&lt;/em&gt;. The problem with this argument, though, is that novels are written &lt;em&gt;in order to be read by humans&lt;/em&gt;. Computer programs are written to make a computer do a thing. So to learn from other people's code, we shouldn't &lt;em&gt;read&lt;/em&gt; it - we should &lt;em&gt;decode&lt;/em&gt; it. We should act like naturalists and treat the code like specimens.  I think studying/decoding something takes a lot more time and mental energy than reading something, but it makes total sense that this approach would make it easier/less frustrating to learn from other people's code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I love &lt;a href="http://simplystatistics.org/2012/10/30/on-weather-forecasts-nate-silver-and-the/"&gt;Jeff Leek's post explaining what Nate Silver meant&lt;/a&gt; when he wrote that Obama had a 75% chance of winning the 2012 election, based on a giant analysis of lots of poll data. Jeff illustrates important statistical concepts (like variability) with a simple simulation. This post is written for a general audience (not an audience consisting only of statisticians). I wish more people wrote posts about scientific/technical/statistical concepts for general audiences, since these concepts pop up in big, culturally-important news stories from time to time. Also, fun fact, this post isn't recent (it's from October 30, 2012 - just days before the election!), but I read it recently, so it makes the list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I read &lt;a href="http://maryrosecook.com/post/a-practical-introduction-to-functional-programming"&gt;Mary Rose Cook's introduction to functional programming&lt;/a&gt; this week, and I &lt;em&gt;finally&lt;/em&gt; understand what functional programming is! I was so excited! The line in the post that did it for me: "Ignore all that. Functional code is characterised by one thing: the absence of side effects." Now I can legitimately laugh at &lt;a href="https://xkcd.com/1312/"&gt;this XKCD&lt;/a&gt;. I also now know that most of the code I write is not in a very "functional" style: production of a plot is a side effect. Changing data is a side effect. The post is quite detailed and technical, but it's &lt;em&gt;very&lt;/em&gt; good. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I really enjoyed &lt;a href="http://sdawncasey.wordpress.com/about/"&gt;S. Dawn Casey's post&lt;/a&gt; about starting the journey toward being a software developer. She writes: "I can write little scripts that do stupid things, but I can't figure out how exactly this makes the internet work. At all." I felt &lt;em&gt;exactly this feeling&lt;/em&gt; right around week 2 of Hacker School, when I could write games and functions and scripts all day long but didn't really know how to make a usable piece of software. I loved reading about someone else's experiences with that learning process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jvns.ca/blog/2014/02/15/how-was-hacker-school/"&gt;Julia Evans perfectly describes what Hacker School is like&lt;/a&gt; in this post. She did such a great job capturing the essence of Hacker School. The post isn't overly long, but it contains exactly the right amount of detail: it identifies at least 10 qualities that make Hacker School magical. Read the post. It's so good. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Did you ever want to make all the pages on your internet be cats? Now you can! Monica &lt;a href="http://notwaldorf.github.io/posts/go-cat-dns-go/"&gt;made a DNS server that exclusively serves cat pictures&lt;/a&gt;.  I'm really really starting to love reading posts along the lines of "I didn't understand this Thing one day. I felt bad about this so I read the internetz, but then I got confused about A, B, and C." The end. It's also fun if the post continues thusly: "I wrote some totally non-functional code and got super frustrated, but THEN I figured out how to solve A, partially address B, and work around C. Now I have a much better understanding of Thing. Here is a hilarious project demonstrating said understanding!" Monica's post is totally like this. It's about a project she did to understand DNS servers better.  Also the URL at the end of the post is "go cat DNS go" which is way awesome. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I really liked &lt;a href="http://rogerdudler.github.io/git-guide/"&gt;Roger Dudler's beautiful, simple introduction to git&lt;/a&gt;. It covers everything you need to know to get started, with the possible exception of undoing a commit / resetting the repo to a specific commit. (I'm thinking of git reset and rebase). There's even a pretty pdf you can download for reference! Super great. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Fri, 21 Feb 2014 11:39:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-02-21:favorite-blog-posts-2.html</guid></item><item><title>Committee Checker 2.0</title><link>http://alyssafrazee.com/committee-checker-2.html</link><description>&lt;p&gt;Last fall I wrote a little script that might be useful for graduate students and faculty at my school: it checks to see whether a proposed faculty committee satisfies the university's requirements. You can read more about the project in &lt;a href="http://alyssafrazee.com/committee-checker.html"&gt;this post&lt;/a&gt;. This script is now a usable web app! &lt;a href="https://alyssafrazee.shinyapps.io/committees/"&gt;Committee Checker 2.0&lt;/a&gt; is online. Check it out and let me know what you think. The &lt;a href="https://github.com/alyssafrazee/committeeChecker2"&gt;source is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I made this into a web app (rather than leaving it as a script) beause I wanted to learn to use &lt;a href="http://www.rstudio.com/shiny/"&gt;Shiny&lt;/a&gt;, a tool for building interactive web apps with R. Committee Checker 2.0 doesn't require any plots or data visualizations, so I'm not sure it was the ideal Shiny app, but it's up and it works and it doesn't look awful! Given that I'm a statistician, not a web programmer (and certainly not a designer), I'm really happy with the result.&lt;/p&gt;
&lt;p&gt;Some thoughts about the building process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shiny is still pretty new, so it felt like the creators and I (the user) were going on a learning adventure together. I liked that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I liked the documentation a lot: I was able to find answers to most of the questions I had.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There's both an &lt;a href="https://github.com/rstudio/shiny"&gt;official GitHub repo&lt;/a&gt; and an &lt;a href="https://github.com/rstudio/shiny-incubator"&gt;unofficial GitHub repo&lt;/a&gt; for ideas and stuff. I think that's really cool. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shiny is a little less flexible than I had hoped. Let me be clear: you can &lt;em&gt;definitely&lt;/em&gt; get flexibility with a Shiny app, but you have to write your own HTML. I didn't want to do that, so that was my limitation (not Shiny's). But I think there's a happy middle ground that hasn't yet been reached: somewhere between "all visual elements decided for you" and "write your own HTML."  For example, could there be a &lt;code&gt;color&lt;/code&gt; argument to &lt;code&gt;actionButton()&lt;/code&gt; so I could make my "check!" button red without writing the whole UI in HTML?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The setup made it hard to write app code that doesn't violate the "don't repeat yourself" (DRY) principle. Each input element has a unique identifier, and I couldn't figure out a way to get those identifiers into some kind of data structure so I could loop through them. I ended up working around this by either copy/pasting code, or by using non-standard evaluation + leaky scope (on purpose) to loop through identifiers. In other words, I &lt;em&gt;really&lt;/em&gt; need a code review: my source code for this app is not great, and it's completely possible that I missed something fundamental about how to organize the input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deployment is still in development. Currently there are 3 ways to deploy Shiny apps:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;share the source and have users run the app locally &lt;/li&gt;
&lt;li&gt;host on your own Linux server&lt;/li&gt;
&lt;li&gt;deploy with &lt;a href="http://shinyapps.io/"&gt;ShinyApps&lt;/a&gt; which is in still in alpha.    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I chose #3, because #1 defeats a good chunk of (what I see as) the purpose of building a web app, and I don't own a Linux server. Keeping in mind that ShinyApps is in alpha, it's fantastic (just what I was looking for). My app has 502-ed a couple times and I've had to re-deploy, but other than that I have no complaints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commas and parens-matching were really thorny for me while writing these scripts. The error messages didn't help much. I'm actually really impressed that &lt;a href="https://github.com/rstudio/shiny/issues/216"&gt;"more informative error messages" is a GitHub issue&lt;/a&gt; in the shiny repo!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User interfaces are hard!  For any non-trivial app, there are a LOT of decisions to make. I probably need help from somebody who thinks often and intentionally about good design (like my housemate, who's getting her PhD in interaction design). For this app, I spent a lot time thinking about whether the faculty should go in rows or columns and where to put the "check!" button. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I'm glad I learned how Shiny works, and I'd love to use it in the future. I'm not sure it was the best fit for &lt;em&gt;this&lt;/em&gt; particular project: I think it's better-suited for apps involving data and graphics. Committee Checker doesn't, so I might have been able to have nicer source code if I had made it a Flask app instead. Of course, this might not be a web-app-framework issue but a language issue: I think &lt;em&gt;R&lt;/em&gt; is better-suited than &lt;em&gt;Python&lt;/em&gt; to projects involving data and graphics, but &lt;em&gt;Python&lt;/em&gt; might have been the better choice for &lt;em&gt;this&lt;/em&gt; project. That being said, I loved how easy it was to build a web app that was simple, functional, and reasonably attractive while writing only R code. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Sun, 16 Feb 2014 22:30:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-02-16:committee-checker-2.html</guid></item><item><title>let's talk about vectorization</title><link>http://alyssafrazee.com/vectorization.html</link><description>&lt;h3&gt;what's vectorization?&lt;/h3&gt;
&lt;p&gt;In R, a "vector" refers to a one-dimensional array. A "vectorized" function &lt;code&gt;f()&lt;/code&gt; takes a vector &lt;code&gt;[x1, x2, ... , xn]&lt;/code&gt; as input and returns the vector &lt;code&gt;[f(x1), f(x2), f(x3), ... , f(xn)]&lt;/code&gt;. If you'd like to read more about this, you should read Chapter 3 of the &lt;a href="http://www.burns-stat.com/pages/Tutor/R_inferno.pdf"&gt;R Inferno&lt;/a&gt;, where the third circle of R hell is "failing to vectorize."&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;why is vectorization important?&lt;/h3&gt;
&lt;p&gt;R takes a fair amount of heat from the hacker community because it's kind of slow at looping&lt;sup&gt;2&lt;/sup&gt;. It compensates (somewhat) for this weakness by using vectorized functions! Vectorized functions usually involve a behind-the-scenes loop in a low-level language (C or Fortran), which runs way faster than a pure R loop. Here's an example using the &lt;code&gt;log()&lt;/code&gt; function that illustrates the speedup you can get by exploiting the fact that &lt;code&gt;log()&lt;/code&gt; is vectorized: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# illustrating log&amp;#39;s behavior: single values and vectors&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;1.098612&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;0.0000000&lt;/span&gt; &lt;span class="mf"&gt;0.6931472&lt;/span&gt; &lt;span class="mf"&gt;1.0986123&lt;/span&gt; &lt;span class="mf"&gt;1.3862944&lt;/span&gt; &lt;span class="mf"&gt;1.6094379&lt;/span&gt; &lt;span class="mf"&gt;1.7917595&lt;/span&gt; &lt;span class="mf"&gt;1.9459101&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;2.0794415&lt;/span&gt; &lt;span class="mf"&gt;2.1972246&lt;/span&gt; &lt;span class="mf"&gt;2.3025851&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# a vector of 1 million random numbers between 1 and 10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# my function to call log on each vector element separately:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;log_novec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq_along&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;     &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# timing results:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_novec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;1.938&lt;/span&gt;   &lt;span class="mf"&gt;0.004&lt;/span&gt;   &lt;span class="mf"&gt;1.941&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;0.017&lt;/span&gt;   &lt;span class="mf"&gt;0.002&lt;/span&gt;   &lt;span class="mf"&gt;0.019&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;#100x speedup!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in conclusion: vectorization is important because it allows you to operate on vectors &lt;em&gt;quickly&lt;/em&gt; (unlike looping). &lt;/p&gt;
&lt;h4&gt;side note: a small clarification&lt;/h4&gt;
&lt;p&gt;If you are acting as an &lt;em&gt;R user&lt;/em&gt;, you don't need to worry about WRITING vectorized functions. But if you'd like to write R code that will run in a reasonable amount of time on large dataset (memory issues aside), it's good to think about USING vectorized functions, which consequently means learning where and when to look for them. If, on the other hand, you are acting as an &lt;em&gt;R developer&lt;/em&gt;, you might have to implement your own vectorized function, which will probably involve writing some C or Fortan.&lt;/p&gt;
&lt;h3&gt;how about those "apply" functions?&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/"&gt;apply family of functions&lt;/a&gt; provides some fairly clean syntax for &lt;em&gt;apply&lt;/em&gt;-ing a function (any function) to each element of some data structure. The point I want to emphasize is this: &lt;strong&gt;apply functions are basically equivalent to loops in terms of speed&lt;/strong&gt;. As the R Inferno puts it: apply "is not vectorization, it is loop-hiding." So using apply instead of loops might make for nicer/shorter code, but it won't make for &lt;em&gt;faster&lt;/em&gt; code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;1.847&lt;/span&gt;   &lt;span class="mf"&gt;0.025&lt;/span&gt;   &lt;span class="mf"&gt;1.871&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;0.781&lt;/span&gt;   &lt;span class="mf"&gt;0.001&lt;/span&gt;   &lt;span class="mf"&gt;0.781&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(I did get a 2x speedup by using &lt;code&gt;vapply&lt;/code&gt; and telling it that I knew the result would be numeric, but that's nothing compared to my 100x speedup from using vectorized log.)&lt;/p&gt;
&lt;p&gt;If you are working with data frames and find yourself using lots of apply statements, check out &lt;a href="https://github.com/hadley/plyr"&gt;plyr&lt;/a&gt;, which provides some really nice syntax, and &lt;a href="https://github.com/hadley/dplyr"&gt;dplyr&lt;/a&gt;, a superfast "next iteration" of plyr.&lt;/p&gt;
&lt;h3&gt;lesson 1: think twice about every loop or apply statement you write&lt;/h3&gt;
&lt;p&gt;This is what I've been doing recently: every time I write a loop or apply statement&lt;sup&gt;3&lt;/sup&gt;, I think about whether I can do better. Am I calling a vectorized function inside that loop? Most functions that take a number or a string as input are vectorized. Can I somehow incorporate this into my loop code?&lt;/p&gt;
&lt;h3&gt;lesson 2: matrices sometimes behave like vectors&lt;/h3&gt;
&lt;p&gt;I've learned this lesson pretty recently. There are two ways in which matrices sometimes act like vectors:&lt;/p&gt;
&lt;h4&gt;way 1: rows (or columns) are the vector entries&lt;/h4&gt;
&lt;p&gt;Conceptualizing a matrix as a one-dimensional array of rows (or columns) lets us add a bunch of vectorized matrix functions to our quiver! The following vectorized matrix functions exist and are super fast and awesome: rowSums, colSums, rowMeans, colMeans (in base), rowSds, colSds, rowVars, colVars, rowttests, rowFtests (in &lt;a href="http://www.bioconductor.org/packages/release/bioc/html/genefilter.html"&gt;genefilter&lt;/a&gt;), colMedians, rowMedians (in &lt;a href="http://www.inside-r.org/packages/cran/matrixStats/docs/matrixStats"&gt;matrixStats&lt;/a&gt;). Because I think any serious R programmer should know about and use these functions whenever possible, I was surprised to see this around the Twitterverse the other day:
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Compute row sums of a matrix, M, with apply(M, 1, sum) &lt;a href="https://twitter.com/search?q=%23rstats&amp;amp;src=hash"&gt;#rstats&lt;/a&gt; &lt;a href="http://t.co/Uqc5xgS5Im"&gt;http://t.co/Uqc5xgS5Im&lt;/a&gt;&lt;/p&gt;&amp;mdash; One R Tip a Day (@RLangTip) &lt;a href="https://twitter.com/RLangTip/statuses/428212686359629824"&gt;January 28, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
because, on a 10,000 x 10,000 matrix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;2.191&lt;/span&gt;   &lt;span class="mf"&gt;0.343&lt;/span&gt;   &lt;span class="mf"&gt;2.534&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rowSums&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;0.388&lt;/span&gt;   &lt;span class="mf"&gt;0.001&lt;/span&gt;   &lt;span class="mf"&gt;0.388&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;way 2: matrices get converted to vectors when you call vector functions on them&lt;/h4&gt;
&lt;p&gt;Here's a line of code that was bottlenecking one of my functions a few weeks ago: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normedcounts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lengths&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;normedcounts&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;byrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had a matrix, &lt;code&gt;normedcounts&lt;/code&gt;, where each row had been normalized by a constant. I had stored that constant (times 1000) in the vector &lt;code&gt;lengths&lt;/code&gt;. I wanted to generate the matrix of raw (un-normalized) counts. Upon seeing this code, my advisor said "wait...are you just multiplying each row of this matrix by a number? You can just use:"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lengths&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;normedcounts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line of code is actually a little bit tricky. There are several concepts/R quirks floating around in here - I'll illustrate them with toy examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;matrices get turned into vectors by column:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RECYCLING&lt;/strong&gt; (a blessing and a curse): Here's an illustration of recycling, just with vectors:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Warning&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;shorter&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that recycling happens silently unless the length of the longer vector isn't a multiple of a length of the shorter vector. This is sometimes desirable (it makes it such that constant * vector multiplication behaves as expected, without warning), but it can make debugging hellish :smiling_imp:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;if the longer "vector" was actually a matrix, a matrix gets returned&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;  &lt;span class="mi"&gt;100&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="n"&gt;Warning&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;shorter&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now...once you know these quirks, you can exploit them to use vectorization instead of looping (as my advisor suggested)! The three bullet points above imply that a length-k vector times a k-row matrix returns another matrix, where each row of that matrix is multiplied by the corresponding number in the vector. (That's exactly what I wanted).&lt;/p&gt;
&lt;p&gt;Here are the timings for my example scenario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;normedcounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;runif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;lengths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normedcounts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lengths&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;normedcounts&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
   &lt;span class="nx"&gt;user&lt;/span&gt;  &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="nx"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;7.213&lt;/span&gt;   &lt;span class="mf"&gt;0.323&lt;/span&gt;   &lt;span class="mf"&gt;7.535&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lengths&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;normedcounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;user&lt;/span&gt;  &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="nx"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;0.342&lt;/span&gt;   &lt;span class="mf"&gt;0.225&lt;/span&gt;   &lt;span class="mf"&gt;0.567&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to practice the principles of lesson 2, take the &lt;strong&gt;super fun puzzle challenge for readers&lt;/strong&gt;: using no loops or apply statements, given a matrix M, find the number of outliers in each row of M. An outlier for row &lt;em&gt;k&lt;/em&gt; is defined as an entry that is more than 3 standard deviations above the mean of row &lt;em&gt;k&lt;/em&gt;. &lt;/p&gt;
&lt;h3&gt;lesson 3: methods for S3/S4 class "foo" are often vectorized for class "fooList"&lt;/h3&gt;
&lt;p&gt;I've been doing a lot of work with the &lt;a href="http://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html"&gt;GenomicRanges&lt;/a&gt; library lately. An object of class &lt;code&gt;GRanges&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;   &lt;span class="c"&gt;#x is of class GRanges&lt;/span&gt;
&lt;span class="n"&gt;GRanges&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;ranges&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;seqnames&lt;/span&gt;               &lt;span class="n"&gt;ranges&lt;/span&gt; &lt;span class="n"&gt;strand&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="n"&gt;transcripts&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRanges&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16187163&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16187278&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;15&lt;/span&gt;          &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16189032&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16189143&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;16&lt;/span&gt;          &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16189264&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16189411&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;17&lt;/span&gt;          &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16190681&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16190791&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;18&lt;/span&gt;          &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16192906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16193047&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;19&lt;/span&gt;          &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="o"&gt;---&lt;/span&gt;
  &lt;span class="n"&gt;seqlengths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="n"&gt;X&lt;/span&gt;
   &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is basically a set of intervals ("ranges"), where each range has some associated metadata. &lt;/p&gt;
&lt;p&gt;You can extract the width of each interval with the &lt;code&gt;width()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt; &lt;span class="mi"&gt;112&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;142&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had written a piece of code to operate on a list of 1296 &lt;code&gt;GRanges&lt;/code&gt; objects. This type of list is conveniently classed as a &lt;code&gt;GRangesList&lt;/code&gt;. Because &lt;code&gt;width&lt;/code&gt; is a &lt;code&gt;GRanges&lt;/code&gt; function, my immediate thought was that I would need to write an &lt;code&gt;lapply&lt;/code&gt; statement to get a list of range widths for each of the &lt;code&gt;GRanges&lt;/code&gt; objects in my &lt;code&gt;GRangesList&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# grl is my GRangesList&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;9.481&lt;/span&gt;   &lt;span class="mf"&gt;0.010&lt;/span&gt;   &lt;span class="mf"&gt;9.490&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is pretty slow for a list of length 1296, so I did a bit of documentation-reading and found out that the &lt;code&gt;width()&lt;/code&gt; method is &lt;em&gt;vectorized&lt;/em&gt;: you can call it on a &lt;code&gt;GRangesList&lt;/code&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; 
  &lt;span class="mf"&gt;0.001&lt;/span&gt;   &lt;span class="mf"&gt;0.000&lt;/span&gt;   &lt;span class="mf"&gt;0.001&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...WITH AMAZING RESULTS. 9000X SPEEDUP, BABY. &lt;/p&gt;
&lt;h3&gt;lesson 4: sometimes you really do need a loop&lt;/h3&gt;
&lt;p&gt;Alas, vectorized functions can't solve all of our problems. For example, loops with dependent iterations, like Gibbs samplers and Hidden Markov Models, will probably need to stay loops. All is not lost, however: if you (or your friends!) know a lower-level language, you (all) can write the functions yourself, perhaps using a tool like &lt;a href="http://www.rcpp.org/"&gt;Rcpp&lt;/a&gt; to interface with R. &lt;/p&gt;
&lt;h3&gt;footnotes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The R Inferno is hilarious and informative reading for anyone who loves and/or hates R.&lt;/li&gt;
&lt;li&gt;R takes heat from the hacker community for a number of other reasons as well. We can (maybe) talk about this another day, but what I'll say now is this: I don't like when people that have never used R go on and on about how terrible it is. The way I feel about R is how I imagine I'd feel about my dorky little brother (if I had one): he's quirky and weird and not the best athlete ever, but &lt;em&gt;you&lt;/em&gt; don't get to make fun of him because he's &lt;em&gt;my&lt;/em&gt; brother, not yours. Incidentally, this is also the way I feel when people hate on Baltimore. &lt;/li&gt;
&lt;li&gt;I find myself writing loops and apply statements embarrassingly often. I suspect this happens for two reasons: 1. I find loops more intuitive/expressive: they more closely match how I conceptualize the code in my head, and 2. the programming language I learned first, and the only one I ever learned in a formal classroom setting, is C++. &lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Sun, 09 Feb 2014 21:10:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-02-09:vectorization.html</guid></item><item><title>Today I read some code I wrote in 2007 and laughed</title><link>http://alyssafrazee.com/old-code.html</link><description>&lt;p&gt;A few weeks ago, I heard or read something like this: "if you look back at work you did a while ago and you think it was really awful, &lt;em&gt;this is a good thing&lt;/em&gt; because it means you're improving." &lt;/p&gt;
&lt;p&gt;I remember thinking this was a great attitude to have toward old work that you now look upon with shame. Instead of getting caught up in how terrible it seems, get caught up in how far you've come since then! Positive thinking, encouragement, etc etc etc. I'm sorry I can't remember where I heard this (if it was you who said this to me, let me know and I'll give you the appropriate shout-out!).&lt;/p&gt;
&lt;p&gt;Today I was doing a little re-organization of my hard drive when I came across some of the R code I wrote in college, when I was first learning about R and data analysis and statistics. I almost thought "oh my goodness I shouldn't put this on the internet! It's hilariously awful!" but then I thought maybe "it's hilariously awful!" was a great reason to put it on the internet: non-beginners will be entertained, and beginners might be encouraged! So, I give you: a script I wrote for my statistics class in the fall of 2007, which I had creatively and informatively titled &lt;code&gt;september12.R&lt;/code&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/alyssafrazee/8702020.js"&gt;&lt;/script&gt;

&lt;p&gt;Some fun features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number of comments: 0&lt;/li&gt;
&lt;li&gt;everything is saved, even my mistakes (cf. lines 8, 19, 31)&lt;/li&gt;
&lt;li&gt;oh my, &lt;code&gt;attach()&lt;/code&gt; is used! ("bad form" in any non-trivial data analysis project)&lt;/li&gt;
&lt;li&gt;the mystery of lines 25-28: This looks like some convoluted library loads that I evidently was using in order to make a dot plot...? And I'm calling &lt;code&gt;:::&lt;/code&gt;?! I guarantee you I had no idea what these lines were doing and had copy/pasted them from class notes to make &lt;code&gt;DOTplot&lt;/code&gt; work.&lt;/li&gt;
&lt;li&gt;the use of R as a calculator in lines 21-24, with no explanation of why (though it looks like I was calculating outlier cutoffs using IQR)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So many feelings. :grimacing: :joy: :flushed: :worried:&lt;/p&gt;
&lt;p&gt;Happily, I've improved as an R programmer since 2007. I was curious as to how much R code I've written since then, so I went on a little detour and did a quick analysis of my hard drive: how many lines of R do I have stored in the following folders: &lt;code&gt;Documents&lt;/code&gt;, &lt;code&gt;Google Drive&lt;/code&gt;, &lt;code&gt;Dropbox&lt;/code&gt;, and &lt;code&gt;Desktop&lt;/code&gt;? (I wanted to exclude R code from my installed libraries and applications - I'm interested in code that &lt;em&gt;I&lt;/em&gt; have written). By this metric, I estimate that I've written &lt;strong&gt;437,878&lt;/strong&gt; lines of R. In these folders, I also have 130,912 lines of Python (a lot of which is attributable to my Hacker School summer) and 1431 lines of C++ (from my college software design class!). &lt;/p&gt;
&lt;p&gt;Anyway, after writing 437K lines of R, my code is now a little nicer! Here's something I wrote last month:&lt;/p&gt;
&lt;script src="https://gist.github.com/alyssafrazee/8702510.js"&gt;&lt;/script&gt;

&lt;p&gt;Some things I apparently learned between writing that first bit of code and writing this bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to name files better (this one was named &lt;code&gt;first_simulation.R&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;how to write R packages&lt;/li&gt;
&lt;li&gt;how to put those R packages on GitHub&lt;/li&gt;
&lt;li&gt;how to write functions (kind of required for R package development)&lt;/li&gt;
&lt;li&gt;how to comment code&lt;/li&gt;
&lt;li&gt;how to create variables&lt;/li&gt;
&lt;li&gt;what a FASTA file is&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, as I looked for an example of "good" code to put in this post, I learned that in general, data analysis code is pretty ugly. There's a difference between writing &lt;em&gt;programs&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt; and writing code that &lt;em&gt;loads&lt;/em&gt;, &lt;em&gt;cleans&lt;/em&gt;, and &lt;em&gt;analyzes data&lt;/em&gt;. Right now, I'm finding it a lot easier to write nice, clean programs and functions than to write a beautiful data analysis script. Perhaps there's also a language component (I have some &lt;em&gt;really beautiful&lt;/em&gt; Python), but I do think data analysis is kind of a messy process. &lt;/p&gt;
&lt;p&gt;Thanks for laughing at my code from 7 years ago with me :) &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Wed, 29 Jan 2014 11:59:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-01-29:old-code.html</guid></item><item><title>smells like a NAMESPACE problem</title><link>http://alyssafrazee.com/namespaces.html</link><description>&lt;p&gt;Writing R packages is fun. Some people say you should start making your R code into a package &lt;a href="https://github.com/jtleek/rpackages"&gt;as soon as you have two functions&lt;/a&gt; (just two!!). Making a package involves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Putting your function definitions into separate files and putting those files in a folder called &lt;code&gt;R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Documenting your functions in .Rd files and putting those doc files in a folder called &lt;code&gt;man&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Making &lt;code&gt;DESCRIPTION&lt;/code&gt; and &lt;code&gt;NAMESPACE&lt;/code&gt; files&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's it! Awesome. Mostly. (1) is pretty easy, but (2) gets snarly if you try to do it manually (never fear! &lt;a href="http://www.rstudio.com/ide/docs/packages/documentation"&gt;roxygen2&lt;/a&gt; is here), and (3) confused me for about a year. &lt;/p&gt;
&lt;p&gt;Sometimes when you are confused about &lt;code&gt;DESCRIPTION&lt;/code&gt; and &lt;code&gt;NAMESPACE&lt;/code&gt; files, or package development in general, people and/or Google will tell you to read &lt;a href="http://cran.r-project.org/doc/manuals/R-exts.html#Creating-R-packages"&gt;the official documentation&lt;/a&gt;. Those people are wrong, unless you're really into things I don't understand, like "F95 code", "Makevars", and "pthreads". If instead you want to know what R namespaces are/why they're important and see some illustrative examples, you should read &lt;a href="http://adv-r.had.co.nz/Namespaces.html"&gt;Hadley Wickham's page about them&lt;/a&gt;, and then you should read &lt;a href="http://obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/"&gt;this delightful post&lt;/a&gt;. If you want to know about R package development in general, you should read pretty much all of &lt;a href="http://adv-r.had.co.nz/"&gt;Advanced R programming&lt;/a&gt;, Hadley's internet book, and then check out &lt;a href="https://github.com/jtleek/rpackages"&gt;Jeff Leek's guide to R package development&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes, even if you've read about package development, you make mistakes in your &lt;code&gt;DESCRIPTION&lt;/code&gt; and &lt;code&gt;NAMESPACE&lt;/code&gt; files. These kinds of mistakes can cause some really weird problems. I have made so many of these mistakes that I'm starting to recognize them as namespace mistakes (learning FTW!). In hopes of helping other people (including future Alyssa!) avoid those mistakes, here are some of the things that I've learned might indicate namespace issues:&lt;/p&gt;
&lt;h3&gt;symptom: R can't find my function even though I loaded my package&lt;/h3&gt;
&lt;p&gt;diagnosis: failure to export. If you want a package function to be directly callable by users, you need &lt;code&gt;export(functionName)&lt;/code&gt; in the &lt;code&gt;NAMESPACE&lt;/code&gt; file. If you're using roxygen2, you need a &lt;code&gt;@export&lt;/code&gt; tag in the docs for &lt;code&gt;functionName&lt;/code&gt;. Probably you know this if you read any introductory material about package development, but it's easy to forget, especially if you have more than a few internal functions.&lt;/p&gt;
&lt;h3&gt;symptom: error(s) when I use my function, but not when I run its lines to debug&lt;/h3&gt;
&lt;p&gt;The following frustrating sequence of events has happened to me lots of times (including earlier this afternoon):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I load my brand new package&lt;/li&gt;
&lt;li&gt;I call one of its functions&lt;/li&gt;
&lt;li&gt;There's an error&lt;/li&gt;
&lt;li&gt;I find which line in the function is throwing the error with a &lt;code&gt;traceback()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;I grab that function's source, make variables with the same name as the function arguments, and run each line of the function interactively (in the global scope) so I can look at the objects and figure out what's breaking and where&lt;/li&gt;
&lt;li&gt;but everything works TOTALLY FINE IN THE GLOBAL SCOPE&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;diagnosis: either (a) failure to import a dependency, but having that dependency loaded in your workspace because you've called &lt;code&gt;library()&lt;/code&gt; earlier in your session, or (b) relying on the &lt;code&gt;Depends&lt;/code&gt; field of the &lt;code&gt;DESCRIPTION&lt;/code&gt; file to specify your package's dependencies rather than the &lt;code&gt;Imports&lt;/code&gt; field. There are several helpful discussions (e.g. &lt;a href="http://stackoverflow.com/questions/8637993/better-explanation-of-when-to-use-imports-depends"&gt;this&lt;/a&gt; and &lt;a href="http://stackoverflow.com/questions/9893791/imports-and-depends"&gt;this&lt;/a&gt;) about the difference between &lt;code&gt;Imports&lt;/code&gt; and &lt;code&gt;Depends&lt;/code&gt; on StackOverflow, and I'm still like 8% confused about what that difference is, but I do know this: it's usually better to put your package's dependencies in the &lt;code&gt;Imports&lt;/code&gt; field. &lt;a href="http://stackoverflow.com/questions/8637993/better-explanation-of-when-to-use-imports-depends"&gt;The first answer here&lt;/a&gt; gives a nice explanation centering around the "search path" (i.e. the order of the scopes in which R looks for function definitions when they are called; see &lt;a href="http://obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/"&gt;this post&lt;/a&gt; for even more details). From what I understand, using &lt;code&gt;Imports&lt;/code&gt; rather than &lt;code&gt;Depends&lt;/code&gt; to specify dependencies has two big benefits: (1) the order in which users load your package compared to any other packages doesn't matter, and (2) loading your package won't mess up the way functions are called from other packages. Also, we wouldn't have these problems if everyone would just use &lt;code&gt;Imports&lt;/code&gt; instead of &lt;code&gt;Depends&lt;/code&gt;, but no such luck because please, we are R programmers, so sometimes life is hard. There are always caveats, like the &lt;a href="http://stackoverflow.com/questions/8637993/better-explanation-of-when-to-use-imports-depends"&gt;edit to the nice SO answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, to summarize this diagnosis: your package's namespace might be missing a function from a dependency. Did you forget to import a dependency? Did you specify your dependencies with &lt;code&gt;Depends&lt;/code&gt; instead of &lt;code&gt;Imports&lt;/code&gt;? (stop that.)&lt;/p&gt;
&lt;h3&gt;symptom: your friends get errors when using your package on their machines, but everything works fine for you&lt;/h3&gt;
&lt;p&gt;diagnosis: Like the last symptom, this could be caused by either a failure to import a dependency and/or relying on &lt;code&gt;Depends&lt;/code&gt; instead of &lt;code&gt;Imports&lt;/code&gt; in &lt;code&gt;DESCRIPTION&lt;/code&gt;. Check those two things, and come back.&lt;/p&gt;
&lt;p&gt;If there are still problems, have your friends run &lt;code&gt;sessionInfo()&lt;/code&gt; and check their versions of the packages that are &lt;code&gt;loaded via a namespace (and not attached)&lt;/code&gt;. Do they match the versions output in your &lt;code&gt;sessionInfo()&lt;/code&gt;? (things sometimes break if people are using either super old or bleeding-edge/development versions of packages). If your package requires a certain version of a package, you can add this to the package in your &lt;code&gt;DESCRIPTION&lt;/code&gt; file (e.g., &lt;code&gt;Imports: sweetPackage(&amp;gt;=2.5.0)&lt;/code&gt;. Also make sure everyone is using the newest stable version of &lt;code&gt;R&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;symptom: you're fixing bugs by calling functions with the :: operator&lt;/h3&gt;
&lt;p&gt;You can force your package to use functions from a specific package (say &lt;code&gt;foo&lt;/code&gt;) by using &lt;code&gt;::&lt;/code&gt; -- e.g., to call &lt;code&gt;foo&lt;/code&gt;'s &lt;code&gt;unlist&lt;/code&gt; function, you can do &lt;code&gt;foo::unlist(x)&lt;/code&gt;. However, if I'm doing this inside a function I've written because I'm getting errors otherwise, and I don't need the &lt;code&gt;::&lt;/code&gt; operator when I'm operating outside my package, it's sometimes an indicator I've forgotten to put either &lt;code&gt;import(foo)&lt;/code&gt; or &lt;code&gt;importFrom(foo, unlist)&lt;/code&gt; in my package's &lt;code&gt;NAMESPACE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Did I miss anything? What are your lingering unanswered questions? One of mine: can I put a package in both &lt;code&gt;Depends&lt;/code&gt; AND &lt;code&gt;Imports&lt;/code&gt;? If, say, I want a correct search path AND I want said package to be available interactively?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Tue, 21 Jan 2014 23:13:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-01-21:namespaces.html</guid></item><item><title>recent blogosphere highlights {part 1}</title><link>http://alyssafrazee.com/favorite-blog-posts.html</link><description>&lt;p&gt;I love reading other people's blogs, but I'm terrible at keeping track of all the great stuff that's out there. I'll read something, think to myself, "hey that was super cool!" and promptly forget about it as I go on my merry way. NO MORE! I'm starting my own series of blog posts about other great blog posts. Here's part 1!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Garann Means &lt;a href="http://www.garann.com/dev/2012/hostess-and-britruby/"&gt;breaks down the different types of criticism&lt;/a&gt; you can get and gives some good insights on when to take that criticism to heart and do some growing versus when to say "haters gonna hate" and move on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phillip Guo &lt;a href="http://pgbovine.net/hacker-school-residency.htm"&gt;reflects on his Hacker School residency&lt;/a&gt;.  I was so impressed at how thoughtful this post was.  Despite spending only four days at Hacker School, he has a deep understanding of what Hacker School is about and why it's so awesome.  He is also really good at giving nice tl;drs if you're strapped for time. A must-read if you're wondering what it's like to be at Hacker School -- he's dead on with almost everything he says. One day, though, I will write a long post discussing this statement: "The closest approximation to this experience [Hacker School] is being in a well-funded Ph.D. program with an open-minded and supportive advisor."  In 2013 I went from a (well-funded, awesomely-advised) Ph.D. program, to Hacker School, then back to the Ph.D., and there were some major differences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaking of my awesome advisor, Jeff Leek &lt;a href="http://simplystatistics.org/2012/08/09/a-non-exhaustive-list-of-things-i-have-failed-to/"&gt;totally owns his I-tried-and-got-rejected moments&lt;/a&gt;.  The best quote in there was "to be successful, you have to be willing to fail over and over."  It was so reassuring and encouraging and motivating to know that even people who are really great at what they do experience rejection a lot, and I thought it was really cool that Jeff was willing to share this with the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allison Kaptur takes readers on an &lt;a href="http://akaptur.github.io/blog/2013/07/24/systematic-debugging/"&gt;adventure in systematic debugging&lt;/a&gt;.  I liked this glimpse into Allison's thought process: everybody works through things a little differently, and I like experiencing the way other people approach problems.  I also ruminated on this line (from the introspection section at the end) for a long time: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Whether I should have done this [systematic debugging] depends on your perspective: at Hacker School, I’m almost 100% learning motivated and about 0% get-it-done motivated, so my time to solve the bug is virtually unbounded." &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is SO NOT how it usually works when you're doing research or getting a PhD - you &lt;em&gt;must&lt;/em&gt; produce results and get stuff done or they won't give you a PhD. But I also wonder if taking the time to do things simply for the sake of learning actually makes you &lt;em&gt;better&lt;/em&gt; at getting things done in the long run? Allison's systematic debugging rabbit hole will probably cut lots of time off her process next time she has to solve a string/regex/efficiency problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Garann Means makes the list again - she &lt;a href="http://www.garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/"&gt;wants YOU to blog about code&lt;/a&gt;.  Honest, inspiring, and funny (reaction gifs are encouraged). One of many highlights: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"If you start thinking for even one second that [your blog post] isn’t valuable, try to picture you yourself finding such a thing when you started your day this morning and all the agony and yak-shaving it would have saved you. The internet is full of horrible crap! If your horrible crap is at least well-intentioned, it’s probably a step up from the other horrible crap."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jake VanderPlas writes about &lt;a href="http://jakevdp.github.io/blog/2013/10/26/big-data-brain-drain/"&gt;the Big Data Brain Drain&lt;/a&gt; from academia. I love that he articulates &lt;em&gt;very&lt;/em&gt; compelling reasons that computational people could (and do) leave academia, and &lt;em&gt;then&lt;/em&gt; suggests some ways that academia could incentivize those computational people to stay.  Worth a read for any academics in a computational field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emma &lt;a href="http://countaleph.wordpress.com/2013/10/20/dear-startups-stop-asking-me-math-puzzles-to-figure-out-if-i-can-code/"&gt;questions whether math-puzzle-solving ability == coding ability&lt;/a&gt;.  She talks about her experiences getting hired and working as a software engineer and wonders whether the problem-solving interview questions really indicate whether someone will be able to do the job they're being hired for. It's a great read.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paul Hinze &lt;a href="http://phinze.github.io/2013/12/08/pairing-vs-code-review.html"&gt;compares the developer cultures of pairing and code-review&lt;/a&gt;. He gives great definitions of what pairing and code review are and goes into a lot of detail on when/why each approach works and doesn't work. I'm not a software developer, and I &lt;em&gt;still&lt;/em&gt; found this post fascinating: I think the ideas translate to collaborative research (Should we actually do our work WITH our co-authors? Or should we each bring our results to the next meeting?). It was also nice to get a detailed picture of what it's like to be a software developer in one or both of these cultures.  Finally, there's lots of material throughout the post about the qualities of good code and good programmers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep blogging, and keep sharing the cool stuff you've read! &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Tue, 14 Jan 2014 21:50:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-01-14:favorite-blog-posts.html</guid></item><item><title>motivation and unstructured time: successes and failures</title><link>http://alyssafrazee.com/unstructured-time.html</link><description>&lt;p&gt;Around this time two years ago, I had just finished my graduate coursework and was transitioning into full-on research mode. All of a sudden, school was a LOT different than it had been for the previous 18-ish years. I was faced with the odd problem of having a big workload consisting of major, long-term projects, and also having tons of free time to do that work. For me, the biggest challenge with that setup was motivating myself to do work on a daily basis without the deadlines and self-contained tasks typical of homework assignments and exams. With so much less urgency and so many fewer negative consequences of procrastination, it was unexpectedly difficult to make myself sit down and work on my research. &lt;/p&gt;
&lt;p&gt;Now I have two years of experience with this type of workload/schedule, and I've been feeling pretty motivated lately, so I thought I'd write down some of the tactics I've tried to get myself into "working mode." My hope is that it will be useful for people who, like 2012 me, have suddenly found themselves with lots of unstructured time. I'm definitely no expert - all of this is totally anecdotal - but if you're looking for ideas, here's what I've tried:&lt;/p&gt;
&lt;h4&gt;Stuff that didn't work&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setting "task-oriented" goals&lt;/strong&gt;: "I'm going to get X, Y, and Z finished before I leave my office today."  One problem with this strategy is that I'm not very good at predicting how long X, Y, and Z are going to take. Part of it is the nature of research...since nobody's ever done what you're trying to do, X might fail spectacularly or it might not, and you can't know that until you try it. Also, getting Y done often depends on already having X right, and if X takes lots of fine-tuning, I might not get to Y for a few days or weeks. I barely ever succeeded at my task-oriented goals, which made me even less motivated to work on them the next day. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;giving myself fake deadlines&lt;/strong&gt;. A REAL deadline can be a decent motivator (see last bullet in next section), but I don't have &lt;em&gt;quite&lt;/em&gt; enough willpower to keep self-imposed deadlines with self-imposed consequences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;working from home&lt;/strong&gt;. Sometimes it doesn't sound all that appealing to me to go work in my windowless, gray-walled, shared-between-5-people office. I've come up with every excuse in the book: I'm tired, there's traffic and the bus is going to be super slow, I don't have anything to bring for lunch, I have windows in my apartment, it's too hot, it's too rainy, blah blah blah. BUT. The fact of the matter is that for me, there are too many distractions at home. And it's even &lt;em&gt;more&lt;/em&gt; dangerous because if I work at HOME, nobody will ever KNOW if I have a 10-hour Netflix marathon instead of working on my research -- but I (and possibly the people I'm working with) will pay that price sometime later. At my office, there may not be windows, but there is social pressure to be working. (Coffee shops are alright, but unless I go with a friend, I feel pretty free to leave whenever I want, so I think the office is the best motivator.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Stuff that worked&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setting "time-oriented" goals&lt;/strong&gt;: "I'm going to work on this problem for the next 2 hours." This strategy has worked SO MUCH BETTER for me than the task-oriented goal strategy I mentioned above. I feel a lot less pressure and a lot more freedom with this approach. I feel like I'm allowed to take the time to make 800 exploratory plots, or write good code, or automate a process that I know I'll have to repeat later, etc. I find it way easier to get into the so-called "zone" when I'm less focused on the &lt;em&gt;finish&lt;/em&gt; and more focused on the &lt;em&gt;process&lt;/em&gt;. And even if I don't finish the thing, I know I've put in a solid couple hours of work, so I feel a lot less guilty.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;working when, but not &lt;em&gt;only&lt;/em&gt; when, I feel like working&lt;/strong&gt;.  In other words, &lt;code&gt;if(in working mood): do work;&lt;/code&gt; AND AVOIDING &lt;code&gt;if(not in working mood): do not work;&lt;/code&gt; (more on the latter in a moment).  What I mean here is that If I get some strange, magical second wind at 5pm, or 7pm, or 11pm, and I have that time free anyway...I just roll with it and work outside of "working hours." &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If I'm completely wiped out (i.e., I've just been staring at my computer, glossy-eyed, for the past 30 minutes, or I'm switching back and forth between my code and my Twitter feed every 7 seconds): I give myself 3 options: (1) &lt;strong&gt;switch to a different problem&lt;/strong&gt;, (2) &lt;strong&gt;take a coffee break or a focus walk&lt;/strong&gt;, or (3) &lt;strong&gt;call it quits for the day&lt;/strong&gt;.  I usually only choose (3) if it's late-ish in the day or if I'm facing some obstacle today that won't be there tomorrow (e.g., a headache) -- but I never take (3) off the table. I often choose (1) if I have "administrative" things to do, like grading, or documenting/refactoring code. I find that this less research-y stuff doesn't require quite as much brainpower, since it doesn't involve coming up with like 20 new ideas per minute, but it still needs to get done. Option (2) is also surprisingly effective for me: taking what I call a "focus walk" -- a ~20-minute walk, perhaps with some sweet jams on the ipod -- usually makes me a bit more productive when I get back to work. I also have extroverted tendencies, which means I get energy from interacting with people (and also from coffee), so the grab-a-friend-and-get-a-coffee strategy has also gotten me refocused several (hundred) times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If I'm unmotivated because I'm STUCK, i.e., I'm not sick of working but I've hit a wall on a particular problem, I try to follow &lt;a href="https://blogs.akamai.com/2013/10/you-must-try-and-then-you-must-ask.html"&gt;this advice&lt;/a&gt; -- &lt;strong&gt;try for 15 more minutes, record everything I did (which is good practice anyway), and then find somebody to ask for help&lt;/strong&gt;. My advisor has a great stop-by-and-ask-questions-any-time policy, so I usually go there first, but if he's not around, I'll certainly ask fellow students or postdocs, or at least fire off an email or two. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;becoming accountable&lt;/strong&gt;: Sometimes I call up a work friend and ask them on an early-morning breakfast date: let's get &lt;a href="http://belvederebagelsandgrill.com/"&gt;bagels at 8am&lt;/a&gt; and then head in to work together! Or sometimes I make plans with a friend to go to a &lt;a href="http://www.yelp.com/biz/tribeca-coffee-roasters-baltimore"&gt;coffee shop&lt;/a&gt; at 3pm - together we can fight temptation to call it a day at 2:30!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;finding a real deadline&lt;/strong&gt;: I've written two papers &lt;em&gt;amazingly quickly&lt;/em&gt; because I was entering them into student paper competitions for travel awards to conferences. These were real deadlines, so there was definitely pressure to finish, and it forces me to do the hardest part of paper-writing: &lt;em&gt;getting words on the page&lt;/em&gt;. There isn't enough time to fret about every little detail - just get the ideas across, then edit later. (As they say, "write drunk, edit sober" - while I don't advocate writing drunk, I think letting go of some inhibitions while writing a first draft is important.) SADLY I didn't win the awards - but I did get a lot of work done in the days leading up to the deadlines :) &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ideas I've heard from other people but haven't tried myself&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reading a book about productivity: I've heard a bit about &lt;a href="http://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280"&gt;Getting Things Done&lt;/a&gt;, but the only actual experience I have with it is looking up that Amazon link for this post.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collecting or recording data on how you spend your time (thanks &lt;a href="http://hopstat.wordpress.com/"&gt;John&lt;/a&gt; for this idea).  Maybe with GitHub, if you write lots of code? Ask yourself, "have I pushed code today?" (we asked ourselves this A LOT at Hacker School). The data might be able to help you learn things like what time of day you work best.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Final thoughts&lt;/h4&gt;
&lt;p&gt;Know thyself, as they say. If you're more introverted than I am, coffee with a friend might not be as energizing for you as it is for me. If you excel at working under a lot of pressure, maybe task-oriented goals will work for you. It took a long time for me to figure out what worked for me, and I'm still learning - I'm ALWAYS looking for new strategies that have worked, so if you have a brilliant motivational idea, please share!&lt;/p&gt;
&lt;p&gt;{&lt;strong&gt;update, 1/22/14:&lt;/strong&gt;} Peter Hickey shares! Here's his &lt;a href="http://peterhickey.me/2014/01/21/getting-shit-done/"&gt;follow-up post&lt;/a&gt; with some more suggestions.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Fri, 10 Jan 2014 10:22:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-01-10:unstructured-time.html</guid></item><item><title>introducing R to a non-programmer in one hour</title><link>http://alyssafrazee.com/introducing-R.html</link><description>&lt;p&gt;My sister is a senior undergraduate majoring in sociology.  She just landed an awesome analyst job for next semester and was told she'll be using some R in the course of her work.  She asked me to show her the ropes during winter vacation, and of course I said yes!  What better way to while away the days of a Minnesota winter?!&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;One catch: the day we planned to work, it turned out we only had an hour of overlapping free time. YIKES!&lt;/p&gt;
&lt;p&gt;Challenge accepted. One hour to introduce R to my sociologist sister.  Here's what I did.  I didn't prepare this in advance, and I'm absolutely sure I made mistakes, glossed over key ideas, and/or harped on about something that's not important.  Feedback is absolutely welcome! (I'm genuinely interested in others' "R in an hour" ideas!)&lt;/p&gt;
&lt;h3&gt;(1) download R and RStudio&lt;/h3&gt;
&lt;p&gt;I'm impressed that &lt;a href="http://www.rstudio.com/"&gt;RStudio&lt;/a&gt; is both accessible/helpful for beginners and useful for experts.  Particularly for beginners: the point-and-click options are decent, and the &lt;code&gt;Workspace&lt;/code&gt; panel is really useful for conceptualizing the R environment.  I didn't even bother showing my sister the default R IDE -- I had her download RStudio right away.  You still have to download &lt;a href="http://www.r-project.org/"&gt;plain old R&lt;/a&gt; though, and when we did this, I learned that r-project.org could &lt;em&gt;really&lt;/em&gt; use a design overhaul, (a) because it's not very pretty and (b) downloading R is kind of confusing if you don't know what a "CRAN mirror" is.  &lt;/p&gt;
&lt;h3&gt;(2) console and script&lt;/h3&gt;
&lt;p&gt;The first thing we did after getting set up was type two lines into the console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It wasn't exactly "hello world", but it illustrated some concepts like "assignment" and "variables" and "evaluation"&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The next thing I had my sister do was save those two lines of code in an R script.  (I think it's important to teach beginners how to save code in a script right when they start using the language.)  Then I taught her how to do &lt;code&gt;Cmd - Enter&lt;/code&gt; to execute those lines in the console. &lt;/p&gt;
&lt;p&gt;In the course of explaining this stuff, I learned that "console" and "script" are kind of jargon-y words, so I tried to give specific definitions for each of them.  I also had to be careful to use those exact words rather than things like "REPL" or "prompt."&lt;/p&gt;
&lt;h3&gt;(3) comments&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# COMMENTS ARE SUPER IMPORTANT so we learned about them&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;(4) graphics&lt;/h3&gt;
&lt;p&gt;Scripts and comments and consoles can get a little dry, so at this point, it was time for some fun with graphics! Here is the plot we made:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Teaching my sister about this code involved explaining what a "function" is (since both &lt;code&gt;rnorm&lt;/code&gt; and &lt;code&gt;hist&lt;/code&gt; are functions) and explaining what "function arguments" are and why you can refer to them by name but don't have to.&lt;/p&gt;
&lt;p&gt;I also showed her how to save a graphic - it's easy in RStudio thanks to the handy dandy "Export" button in the graphics window.  &lt;/p&gt;
&lt;h3&gt;(5) getting help&lt;/h3&gt;
&lt;p&gt;I think "getting help" is the most important concept to go over during this kind of session.  Obviously you're not going to learn everything in an hour, so what you really need are the &lt;em&gt;tools to go find that information&lt;/em&gt; when you need it on the job.  Here is the syntax I introduced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# if you know the function name, but not how to use it:&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;chisq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="c"&gt;# if you know what you want to do, but don&amp;#39;t know the function name:&lt;/span&gt;
&lt;span class="err"&gt;??&lt;/span&gt;&lt;span class="n"&gt;chisquare&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given that function docs aren't terribly accessible thing to non-programmers, this might not have been the right tactic here.  I considered stressing the importance of Googling skillz (the single most useful thing I've learned in grad school), or introducing StackOverflow or R-help, but settled on explaining the official doc system.  I figured the answer to one of the most common beginner questions, "how do I do X in R?", would likely be "use the function &lt;code&gt;Y()&lt;/code&gt;" -- so it's important to be able to figure out how &lt;code&gt;Y()&lt;/code&gt; is used. &lt;/p&gt;
&lt;p&gt;I think the other most common beginner question is "I got this error message, Z.  How do I fix it?"  To address this issue, I demoed some common errors (&lt;code&gt;object not found&lt;/code&gt;, &lt;code&gt;unexpected &amp;lt;X&amp;gt; constant&lt;/code&gt;, etc.) and explained what they meant.&lt;/p&gt;
&lt;h3&gt;(6) data types&lt;/h3&gt;
&lt;p&gt;Looking at help files reminded me that the docs often specify that certain function arguments must have a specific type, so we should probably discuss types.  I went over:&lt;/p&gt;
&lt;h4&gt;vectors&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# character vector&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;kiwi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;strawberry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;strawberry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="cp"&gt;# numeric vector&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;matrices&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mymatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mymatrix&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;29&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;  &lt;span class="mf"&gt;0.1183673&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.06122449&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0122449&lt;/span&gt;  &lt;span class="mf"&gt;0.04081633&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mymatrix&lt;/span&gt; &lt;span class="o"&gt;%*%&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chisq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Pearson&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;Chi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Yates&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;continuity&lt;/span&gt; &lt;span class="n"&gt;correction&lt;/span&gt;
&lt;span class="nl"&gt;data:&lt;/span&gt;  &lt;span class="n"&gt;mymatrix&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.8385&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.01568&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;data frames (the mother of all R data types)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# set working directory&lt;/span&gt;
&lt;span class="n"&gt;setwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/Documents/R_intro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# read in a dataset&lt;/span&gt;
&lt;span class="n"&gt;wages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wages.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we had discussed some data types with examples and learned some important stuff along the way, like how to find the number of elements in a vector, what a working directory is, and how to read in a data file.  &lt;/p&gt;
&lt;h3&gt;(7) exploratory data analysis&lt;/h3&gt;
&lt;p&gt;Once you load in a dataset, things start to get fun.  We learned a whole bunch of stuff from this data frame, like how to do basic tabulations and calculate summary statistics, how to figure out if you have missing data, and how to fit a simple linear model.  This part was pretty fun because my sister started leading the session: instead of me saying "I'm going to show you how to do this," it was her asking "Hey, could we make a scatterplot?" or "Do you think we could put the best-fit line on that plot?"  I was really glad this happened - I hope it meant she was engaged and enjoying herself!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;edlevel&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;south&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;     &lt;span class="s"&gt;&amp;quot;workyr&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;union&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;wage&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;    
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;race&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;marital&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;marital&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;     &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; 
             &lt;span class="mi"&gt;438&lt;/span&gt;               &lt;span class="mi"&gt;96&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;workyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="n"&gt;Qu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Median&lt;/span&gt;    &lt;span class="n"&gt;Mean&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="n"&gt;Qu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;    &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
   &lt;span class="mf"&gt;0.00&lt;/span&gt;    &lt;span class="mf"&gt;8.00&lt;/span&gt;   &lt;span class="mf"&gt;15.00&lt;/span&gt;   &lt;span class="mf"&gt;17.82&lt;/span&gt;   &lt;span class="mf"&gt;26.00&lt;/span&gt;   &lt;span class="mf"&gt;55.00&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;534&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;linmod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workyr&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linmod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also learned some more about graphics, like how to make &lt;em&gt;good&lt;/em&gt; histograms and how to create scatterplots with superimposed regression lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;wage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hourly wage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wages in our dataset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;purple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;workyr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;years worked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;age vs. years worked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;workyr&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;wages&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Aaaaand, time's up.&lt;/h3&gt;
&lt;p&gt;What did I miss?  What could have gone better?  The things that occurred to me afterward were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;subsetting with &lt;code&gt;[&lt;/code&gt;.  This is CLUTCH.  It applies to all the data types I introduced and it's super useful.  I wish I would have had time to ask my sister to make a histogram of wages for, say, only females. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;programming-type things: loops, if statements, user-defined functions, etc.  I'm okay with leaving this stuff out -- I taught R here as a data analysis environment rather than a programming language, given my audience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;saving &lt;code&gt;.rda&lt;/code&gt; files and/or your workspace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;installing and loading packages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other data types (e.g., lists)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other (better?) resources/tips/tricks for getting help&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;Overall I had fun introducing R in an hour, and I think (hope?) my sister did too.  I sent her off with some other resources: &lt;a href="https://www.codeschool.com/courses/try-r"&gt;this&lt;/a&gt;, &lt;a href="http://www.cookbook-r.com/"&gt;this&lt;/a&gt;, and &lt;a href="http://www.datacamp.com/courses/introduction-to-r"&gt;this&lt;/a&gt;, none of which I'm terribly familiar with - but I know you need a lot more than an hourlong session from me to be able to analyze real data with R.  I think I covered most of the basics, and my sister said it was pretty helpful.  I'd love to hear how you'd approach the "R in an hour for a non-programmer" challenge!&lt;/p&gt;
&lt;h4&gt;footnotes&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;It's seriously cold here, even for Minnesota.  The temperature has been hovering around 0 for about a month now.  On Monday, the high is -12.  Fahrenheit.  I don't even.&lt;/li&gt;
&lt;li&gt;You may have noticed that I use &lt;code&gt;=&lt;/code&gt; for assignment and that I have now passed that habit on to my sister.  I've thought about this, and I stand by it.  I think &lt;code&gt;&amp;lt;-&lt;/code&gt; is a waste of keystrokes and I've only found it useful when I'm assigning something inside a &lt;code&gt;system.time&lt;/code&gt; call.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 02 Jan 2014 23:22:00 -0500</pubDate><guid>tag:alyssafrazee.com,2014-01-02:introducing-R.html</guid></item><item><title>an unconventional path to efficiency analytics</title><link>http://alyssafrazee.com/efficiency-analytics.html</link><description>&lt;p&gt;"How long did that take to run?"&lt;/p&gt;
&lt;p&gt;I think I've been asked that question approximately one bazillion times in the past few years.  Unsurprising: I'm working in computational biology research.  Whether we're developing our own methods or using our computing resources to analyze data for a collaborator, it's important to have some ballpark computational efficiency figures.  &lt;/p&gt;
&lt;p&gt;But whenever somebody asks me that, usually my response is something like "errr, uh, yeah, hang on one second...I know I have those logs somewhere...wait, did I stick the logs in this folder or that folder?  Maybe it'll be easier to search for my 'job completed' email...Ah, here it is...no, wait, that's from that job that failed...argh, I'll have to get back to you."  WORST RESPONSE TO "how long did that take to run?" EVER.  Advisors need runtimes for grants.  Methods developers need runtimes so we can say our software runs faster than their software.  And it shouldn't be hard to get that data. So, last week, I decided enough was enough: I need a better system for keeping track of computational efficiency statistics.  What I came up with was a little unconventional: I wrote a script to programatically scrape the efficiency stats for a big batch of jobs from my email account.  &lt;/p&gt;
&lt;p&gt;I chose to develop a method for getting the data from emails, rather than, say, extracting the timing information from log files generated by the jobs, for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By default, I get an email notification when one of my batch jobs finishes, so no extra coding is required (i.e., I don't have to remember to add logging lines in my scripts if the software I'm using doesn't do it automatically).  Our department uses the &lt;a href="http://en.wikipedia.org/wiki/Oracle_Grid_Engine"&gt;Sun Grid Engine scheduling system&lt;/a&gt; (which I guess recently became Oracle Grid Engine) on its computing cluster - the "job complete" email notification feature is part of SGE.  An SGE job completion email looks like this:
&lt;img alt="Image" src="static/images/email.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As shown above, the email notification is always formatted the same way and includes the exact same information (timing, memory use, whether the job exited normally or threw an error, etc.), no matter what the job is doing. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fewer files I need to keep track of on a hard drive, the better. I'm pretty bad at reining in the folder hierarchy for large projects, and having to organize log files on top of everything else would be even more challenging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It seemed like a fun side project and a good excuse to write a little Python :) &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll illustrate my path to getting all the runtime and memory statistics using a project I worked on a few weeks ago as an example.  For this project, I needed to run &lt;a href="http://cufflinks.cbcb.umd.edu/index.html"&gt;transcript assembly software&lt;/a&gt; on 538 samples - so, one job for each sample.  Each job needs to consist of one bash script that will be submitted to the computing cluster and run when there are enough resources available.  So I wrote a wrapper script to automatically generate and submit the 538 bash scripts I needed.  Here's where the first trick comes in:&lt;/p&gt;
&lt;h4&gt;trick #1: keep your email notifications organized (it's easy!)&lt;/h4&gt;
&lt;p&gt;In the wrapper script I wrote (the one that submits all the jobs), I had my notification emails sent to an informative alias.  Gmail has this &lt;a href="https://support.google.com/mail/answer/12096?hl=en"&gt;cool feature&lt;/a&gt; involving the &lt;code&gt;+&lt;/code&gt; operator: assuming you own &lt;code&gt;yourname@gmail.com&lt;/code&gt;, mail sent to &lt;code&gt;yourname+[ANYTHING]@gmail.com&lt;/code&gt; will also get delivered to you.   So for this project, I had all the notificiations sent to &lt;code&gt;myemail+projectname@gmail.com&lt;/code&gt;, and then I set up a &lt;a href="https://support.google.com/mail/answer/6579?hl=en"&gt;filter&lt;/a&gt; so that everything sent to that alias would get marked as read, archived, and labeled.  Already this makes the data collection easier (if only by facilitating the "page-through" process for the emails).&lt;/p&gt;
&lt;p&gt;So after all the jobs finished, I had 538 emails (one for each job/sample) in my account that were marked as belonging to this project.  Since each job was analysis of a different sample, there was some variability in runtimes and memory use, but looking through all the emails individually to get a sense of the efficiency of this software run on this particular dataset was going to be a huge pain.  The key was to interact with these emails &lt;em&gt;programatically&lt;/em&gt; instead of manually, which was the second trick:&lt;/p&gt;
&lt;h4&gt;trick #2: programatically interact with your email&lt;/h4&gt;
&lt;p&gt;For this I used &lt;a href="http://context.io/"&gt;context.io&lt;/a&gt;, a library that gives you the tools to write code that gets email data from authorized accounts.  I used the &lt;a href="https://github.com/contextio/Python-ContextIO"&gt;Python API&lt;/a&gt;, but there are versions available in other languages as well.  This is actually a pretty cool piece of software and I can imagine a hundred other uses for it, but for this particular application, I just used it to download the contents of all the messages sent to &lt;code&gt;myemail+projectname@gmail.com&lt;/code&gt;.  With the context.io library, this only takes a few super-sensible lines of code.&lt;/p&gt;
&lt;p&gt;The rest of the analysis was pretty straightforward: after getting all the email data downloaded and parsed, and checking to make sure all the jobs had exited normally, I had a nice dataset of runtime and memory statstics.  I wrote those stats into a tab-separated text file, which I then loaded into R so I could do some quick numerical summaries and make some plots!  (One day I will learn &lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt; and &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt;, but today is not that day.  Also...I think R graphics are prettier.)&lt;/p&gt;
&lt;p&gt;On to the stuff that's actually interesting: the statistics!  My transcript assembly jobs took, on average, 3.57 hours (3 hours, 34 minutes), wallclock time, variance 2.99. The distribution was a little right-skewed, with one job taking more than 14 hours to finish.  &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img src="static/images/time_hist.png" alt="Image"/&gt;
&lt;/p&gt;

&lt;p&gt;Wallclock time is important, but perhaps more informative about the true &lt;em&gt;computational&lt;/em&gt; efficiency of these jobs is the system time.  My grossly simplified understanding of system time is that it's a measurement of how long the computer's OS spent actually doing the job.  Other processes running on the machine might affect the wallclock time of a job, but they &lt;em&gt;won't&lt;/em&gt; affect the system time.  Here we see that for my transcript assembly jobs, the system and wallclock times seem positively correlated (and in fact we have r=0.597) but that some of the jobs with high wallclock time had reasonable system times, indicating that they took a lot of "real" time because of other processes running on the same machine they happened to run on.  &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img src="static/images/syswalltime.png" alt="Image"/&gt;
&lt;/p&gt;

&lt;p&gt;I also looked at memory use, as measured by the maximum amount of memory used by the job at any point during its run.  The mean memory footprint for these jobs was 9.113 G.  Like the wallclock time distribution, the memory use distribution was right-skewed with one of the jobs using 27.7 G of memory. &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img src="static/images/memory.png" alt="Image"/&gt;
&lt;/p&gt;

&lt;p&gt;It appears that there is a positive relationship between wallclock time and memory use (unsurprising), but it's not as strong as I assumed it would be, particularly for the longer/bigger jobs.  &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img src="static/images/memtime.png" alt="Image"/&gt;
&lt;/p&gt;

&lt;p&gt;The Python and R code for this analysis is &lt;a href="https://github.com/alyssafrazee/efficiency_analytics"&gt;available on GitHub&lt;/a&gt;.  A generalized Python script is also available and documented, so if you have Sun Grid Engine-formatted emails you'd like to scrape efficiency statistics from, you can use that script.  All you need to do is download a context.io API key (it's free) and set up your email account to work with that.  Remember to store your "consumer_key" and "consumer_secret" values in column 2 of a tab-separated file called "client_secrets" located in the same directory as the python script.  This probably goes without saying, but keep that file private (i.e. DO NOT commit it to GitHub) or your email account will be hackable. &lt;/p&gt;
&lt;p&gt;My hope is that a generalizable pipeline like this one will make it easier for me to quickly answer the (formerly-dreaded) question "how long did that take?"&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Update, 11/15/13&lt;/strong&gt;: By &lt;a href="https://twitter.com/acfrazee/status/401119198023151616"&gt;request&lt;/a&gt;, here are some more statistics for the example described above.  Specifically, a reader was interested in how input size affected efficiency.  For these transcript assembly jobs, the input was a file of RNA-seq read alignments, so I took input size to be the size of that file.  One line of bash gave me those input sizes (in the folder with the alignments, I ran:  &lt;code&gt;ls -lh | sed 1d &amp;gt; bams.txt&lt;/code&gt;).  Input size was indeed correlated with efficiency!  Turns out the correlation is stronger for input size and wallclock time (r=0.8) than it is for input size and memory footprint (r=0.3).&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="static/images/inputsize.png" alt="Image"/&gt;
&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 14 Nov 2013 17:43:00 -0500</pubDate><guid>tag:alyssafrazee.com,2013-11-14:efficiency-analytics.html</guid></item><item><title>in search of the perfect workflow</title><link>http://alyssafrazee.com/workflow.html</link><description>&lt;p&gt;As I've spent more and more time writing code and analyzing data over the past few years, it's become increasingly obvious that developing a good, comfortable workflow is &lt;em&gt;really important&lt;/em&gt;.  Having a less-than-ideal step somewhere in your workflow is one of those situations where you don't even notice you have a problem until somebody fixes it for you and you're like "wow...that just totally rocked my world." &lt;/p&gt;
&lt;p&gt;In that spirit, I thought I'd share some of the world-rocking software, settings, or concepts that I (or more likely, my friends) have introduced into my workflow over the past few months.&lt;/p&gt;
&lt;h5&gt;text editor&lt;/h5&gt;
&lt;p&gt;Having a text editor you're happy with is really important, productivity-wise.  My favorite is &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;, because (a) it's pretty, (b) there is almost no learning curve, and (c) if you can write Python, you can write extensions for it and make it do pretty much whatever you want.  My favorite extension is &lt;a href="https://github.com/randy3k/Enhanced-R"&gt;Enhanced-R&lt;/a&gt;, which lets you run R code interactively in the Terminal from Sublime (and provides some other cool features).  I actually use &lt;a href="https://github.com/alyssafrazee/Line-by-line"&gt;my own version&lt;/a&gt; of this plugin, which is a bit more stripped-down but lets you run code from Sublime interactively in a REPL in &lt;em&gt;any&lt;/em&gt; language.  I also like &lt;a href="http://pogidude.com/2013/how-to-edit-a-remote-file-over-ssh-using-sublime-text-and-rmate/"&gt;rmate&lt;/a&gt;, which lets me use my local Sublime build to edit files on my department's computing cluster. I wrote more about editors &lt;a href="http://alyssafrazee.com/sublime-plugin.html"&gt;a few months ago&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;definitely use SizeUp&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.irradiatedsoftware.com/sizeup/"&gt;SizeUp&lt;/a&gt; is like...pure awesomeness.  It provides keyboard shortcuts to make the current window exactly full screen, half screen, or quarter screen, and to switch between monitors if you're in to that kind of thing.  It's super nice for, say, lining up Sublime and the Terminal while you're coding. (&lt;a href="http://hopstat.wordpress.com/2013/10/29/sizeup-and-mavericks/"&gt;Be careful&lt;/a&gt; if you're using Mavericks.  Also, fun fact: window-resizing functionality was &lt;a href="http://windows.microsoft.com/en-us/windows7/products/features/snap"&gt;built in to Windows 7&lt;/a&gt;).&lt;/p&gt;
&lt;h5&gt;type, don't click&lt;/h5&gt;
&lt;p&gt;Keyboard shortcuts, keyboard shortcuts, keyboard shortcuts.  Spending a little time immersed in hacker culture will teach you that people that spend the majority of their day coding barely use the mouse at all - it's slower and easier to make mistakes.  So I've gotten familiar with &lt;a href="https://support.google.com/chrome/answer/165450?hl=en"&gt;Chrome keyboard shortcuts&lt;/a&gt;, &lt;a href="https://support.google.com/mail/answer/6594?hl=en"&gt;Gmail keyboard shortcuts&lt;/a&gt;, and &lt;a href="http://interns.barrelny.com/the-mac-keyboard-shortcuts-you-didnt-know-about/"&gt;OSX keyboard shortcuts&lt;/a&gt; -- they're there because they're efficient.  Use them!  You can also customize the keyboard shortcuts for most software on a Mac: &lt;a href="http://mac.tutsplus.com/tutorials/tips-shortcuts/how-to-set-up-custom-keyboard-shortcuts-on-your-mac/"&gt;here's the how-to&lt;/a&gt;!  My favorite custom one basically just shortened the "move to next tab" keystroke sequence for Sublime, Terminal, and Chrome.  &lt;/p&gt;
&lt;h5&gt;speed up that keyboard&lt;/h5&gt;
&lt;p&gt;Another tiny tweak that I swear has increased my productivity by like, at least 5%: Go to System Preferences --&amp;gt; Keyboard, set &lt;em&gt;Key Repeat&lt;/em&gt; to the fastest speed and &lt;em&gt;Delay Until Repeat&lt;/em&gt; to the shortest time. It's magic.  &lt;/p&gt;
&lt;h5&gt;keep up with the blogosphere&lt;/h5&gt;
&lt;p&gt;&lt;a href="digg.com/reader"&gt;Digg Reader&lt;/a&gt; has eased my grief over losing Google Reader as an RSS tool.  I don't think Digg has become as popular as (say) &lt;a href="feedly.com"&gt;Feedly&lt;/a&gt;, but I tried Feedly and didn't like it as much as Digg Reader.  This just gets back to the main message: don't get complacent in your setup; it's worth it to put in the time to find something that works for you.  So...find some blogs you like, and read them productively!&lt;/p&gt;
&lt;h5&gt;write&lt;/h5&gt;
&lt;p&gt;I recently consolidated my official school website and my nerd blog (which I used to host on Wordpress) into this site, and I'm so happy I did that.  For this setup, I use &lt;a href="http://docs.getpelican.com/en/3.2/"&gt;Pelican&lt;/a&gt; to generate the site and I host on &lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.  Pelican lets you write posts in &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;, which is super easy to write and is more flexible than the Wordpress setup.  It's especially great if you ever want to integrate code snippets into your posts.  GitHub Pages is awesome because, well, it's free web hosting, and lots of site generators (like Pelican) have built-in support for it.  I bought alyssafrazee.com from &lt;a href="namecheap.com"&gt;Namecheap&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Also, I've been asked a couple times in the past few weeks how you can justify spending time blogging during a PhD (or beyond, or when you're a full-time dev...), which is a totally reasonable question, since blogging takes up a surprising amount of time.  I think there are several good reasons: to develop your voice as a writer, to practice technical writing (ask for feedback!), to share cool stuff you've learned, to strengthen your online presence...the list goes on.  &lt;a href="http://www.garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/"&gt;Here's a post&lt;/a&gt; that implores developers to blog more because other developers want to know what you (yes, YOU) think. (fair warning: contains profanity). The author makes a great point: it doesn't matter if you have a big readership or not.  Your post about how you solved that super annoying bug six months ago could be invaluable to your colleague when she has the same problem tomorrow - just send her the link.  A few of us in our department get together weekly to talk about blogging, which is really fun because we can get feedback from each other, and the discussion usually turns to technical issues that are important but not directly related to the research any of us are doing.  It's really awesome.  So to sum up: you should blog, even if you think you don't have anything to say.  I know that's not directly related to workflow, but it's been a huge positive change I've made in my working life, so I thought I'd discuss it :) &lt;/p&gt;
&lt;p&gt;These are little changes that have made my work easier.  Would love feedback or suggestions or stories about times where a piece of software or a workflow change made your life better.  I still haven't set up comments on this blog (they'd have to be &lt;a href="http://disqus.com/"&gt;Disqus&lt;/a&gt;...) but feel free to &lt;a href="http://alyssafrazee.com/pages/contact.html"&gt;email me&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Wed, 30 Oct 2013 22:33:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-10-30:workflow.html</guid></item><item><title>fun with logic, coding, and exam committees</title><link>http://alyssafrazee.com/committee-checker.html</link><description>&lt;h4&gt;the problem&lt;/h4&gt;
&lt;p&gt;In &lt;a href="http://biostat.jhsph.edu/"&gt;my department&lt;/a&gt;, there are basically three gigantic exams you have to pass before they will give you a PhD.  The first is a written qualifier, the second is an oral exam based on a research proposal you've put together, and the third is the dissertation defense.  For both the oral exam and the defense, you have to put together a committee of about five faculty members from around the university.  Given the insane schedules of most faculty members and the very specific requirements the school has for the composition of the committee, this is no easy task.  (It's kind of nice, however, that you get to &lt;em&gt;choose&lt;/em&gt; which people you'd like to have grilling you for hours at a time, so there's that).   &lt;/p&gt;
&lt;p&gt;The thing I noticed last year (when I was forming my oral exam committee) is that the requirements for committee composition are well-defined.  There are a lot of them, but it would basically just involve some simple logic of the if/then/else variety to check whether a given group of faculty satisfies them.  Given this, my advisor offhandedly mentioned one day that there should just be a function to check whether your proposed committee fits the school's rules.  Automatable things should be automated; brainpower should be conserved whenever possible.&lt;/p&gt;
&lt;h4&gt;the solution&lt;/h4&gt;
&lt;p&gt;A full year later, I actually got around to writing a little function that takes faculty member information as input and prints out whether the proposed committee will work for either your preliminary oral exam committee or your thesis committee!&lt;/p&gt;
&lt;p&gt;The code (available &lt;a href="https://gist.github.com/alyssafrazee/7094055"&gt;here&lt;/a&gt;) is written in R and can be sourced directly from GitHub using the &lt;code&gt;RCurl&lt;/code&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;codeurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://gist.github.com/alyssafrazee/7094055/raw/a15265f310cdfa6e51d85002f50de10767cd5fe4/checkCommittee.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codeurl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To actually check potential committees, you just create &lt;code&gt;faculty&lt;/code&gt; objects for each potential committee member, then run the &lt;code&gt;checkCommittee&lt;/code&gt; function on those faculty members.  You also have to tell the function your primary department and whether you're making a preliminary oral exam committee or a thesis committee.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# here are some faculty members:&lt;/span&gt;
&lt;span class="n"&gt;jeff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jeff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biostat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assistant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rafa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rafa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biostat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;anthony&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anthony&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bmb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assistant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;steven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;medicine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;joint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biostat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kasper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kasper&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biostat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assistant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;joint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;medicine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;medicine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dani&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dani&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;epi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ben&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faculty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ben&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assistant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# check one possible committee:&lt;/span&gt;
&lt;span class="n"&gt;checkCommittee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rafa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anthony&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kasper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ben&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biostat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;prelim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# check another possible committee:&lt;/span&gt;
&lt;span class="n"&gt;checkCommittee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jeff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rafa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anthony&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kasper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dani&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mydept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biostat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;prelim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic idea is that &lt;code&gt;checkCommittee&lt;/code&gt; runs lots of logical tests on the set of faculty you give it, exiting with an error if something about it isn't compliant with the school's requirements. Full documentation is available in comments at the end of the gist. &lt;/p&gt;
&lt;p&gt;So there you have it - automated committee checking, at least for &lt;a href="http://www.jhsph.edu/"&gt;my school&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;miscellaneous thoughts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I first wrote a draft of this function in April, which was before I went to Hacker School, which meant I didn't yet realize how much nicer this code would be in Python than it is in R.  R's user-defined classes are a huge pain to create, which is why I have that hacky &lt;code&gt;faculty&lt;/code&gt; function that just returns a list instead of a proper S3 or S4 class.  I find Python classes delightful and definitely would have written one called &lt;code&gt;Faculty&lt;/code&gt; for this type of thing.  Between nice classes, comprehensions, and if/else blocks that don't have braces, I think Python code for this would be much more readable.  It's on my to-do list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the intensely curious, &lt;a href="https://gist.github.com/alyssafrazee/7094557"&gt;here's a link to the rules&lt;/a&gt; governing the code I wrote.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GIANT DISCLAIMER: this isn't officially endorsed by the school - whatever this function tells you, your committee still has to be approved by your departmental academic administrator.  There are often unwritten rules as well, which are really hard to incorporate into automated tools :) &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Mon, 21 Oct 2013 21:59:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-10-21:committee-checker.html</guid></item><item><title>finally: my ideal text editor setup</title><link>http://alyssafrazee.com/sublime-plugin.html</link><description>&lt;p&gt;Ever since I bought a Mac two years ago, I've been dreaming of a text editor that compares to the Windows-only &lt;a href="http://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt;.  What a delight.  My favorite thing about Notepad++ was how easy it was to run code in a REPL with a keyboard shortcut (e.g., F8 would run the current line/selection of R code on your local machine, F9 would run code in a Putty SSH session...). I searched high and low for something similar for OSX.  The best I could come up with was a rather involved &lt;a href="working-interactively-on-a-remote-computer.html"&gt;Emacs configuration&lt;/a&gt;.  It was fine, just fine.  I settled.  It worked.&lt;/p&gt;
&lt;p&gt;But I've found/made/hacked something better. Here is &lt;a href="https://github.com/alyssafrazee/Line-by-line"&gt;line-by-line&lt;/a&gt;, a &lt;a href="http://www.sublimetext.com/2"&gt;Sublime Text 2&lt;/a&gt; plugin for OSX that executes the current line/selection in whatever REPL is running in the Terminal, with the keystroke Command-Enter.  It's &lt;a href="http://www.youtube.com/watch?v=is6gtilerPk"&gt;all I ever wanted&lt;/a&gt; (in a text editor).  With this plugin, I'd say Sublime is at least equivalent to, and possibly better than, Notepad++, because the keystroke isn't specific to any coding language.  It just runs whatever's highlighted in Terminal.  It also works with iTerm, if you're into that kind of thing.  It's up to you to decide what REPL is running in the Terminal - which means you have the flexibility to run things in ipython, bpython, R, any REPL in an SSH session...the possibilities are endless!&lt;/p&gt;
&lt;p&gt;All I did was &lt;em&gt;slightly&lt;/em&gt; modify Randy Lai's &lt;a href="https://github.com/randy3k/Enhanced-R"&gt;Enhanced-R&lt;/a&gt; Sublime plugin - he's the real brains behind this operation. I mostly just removed the part where Enhanced-R specifies that it's only active in R mode.  &lt;/p&gt;
&lt;p&gt;Please download/use/enjoy if you, like me, were searching for something like this!  &lt;/p&gt;
&lt;h4&gt;hey, you could just use Emacs for that!&lt;/h4&gt;
&lt;p&gt;Of course I could. You can pretty much use Emacs to do anything and everything; &lt;a href="http://en.wikipedia.org/wiki/Editor_war"&gt;it's an operating system&lt;/a&gt;.  But I already have an OS, I just want a text editor that sends lines of code to the Terminal.  Also, I don't know very much Lisp, so properly customizing Emacs is totally possible but pretty painful.  And I don't want to have to configure my editor separately for each language of code I'm writing.  &lt;/p&gt;
&lt;h4&gt;hey, you could just use Vim for that!&lt;/h4&gt;
&lt;p&gt;Please.  I'm nowhere near hardcore enough to use Vim.  &lt;/p&gt;
&lt;h4&gt;hey, Sublime Text 2 isn't free.&lt;/h4&gt;
&lt;p&gt;And it isn't open source either.  Huge bummer.  This doesn't change the fact that it's a beautiful piece of software.  If it helps, they offer an unlimited free trial period.  &lt;/p&gt;
&lt;h4&gt;will my R graphics look as awesome as if I made them using the default OSX IDE? Or &lt;a href="http://www.rstudio.com/"&gt;RStudio&lt;/a&gt;?&lt;/h4&gt;
&lt;p&gt;Totally.  If you issue a Terminal session of R a plot command, graphics are rendered in Quartz by default.  I'm a fan of Quartz.  Also, now that you mention RStudio, that was another inspiration for this plugin: one of my favorite things about R IDEs is that you can just send the code directly from your script to the REPL with Command-Enter.  Line-by-line effectively gives you something like "*Studio".  &lt;/p&gt;
&lt;h4&gt;How does Line-by-line work?&lt;/h4&gt;
&lt;p&gt;The one-sentence version: Just like Enhanced-R, Line-by-line calls &lt;a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html"&gt;Applescript&lt;/a&gt; from Python to execute the given line of code in the front-most Terminal window.&lt;/p&gt;
&lt;h4&gt;How do I install a Sublime plugin?&lt;/h4&gt;
&lt;p&gt;Just stick the folder with all the plugin's files in it into &lt;code&gt;~/Library/Application Support/Sublime Text 2/Packages/&lt;/code&gt;.  You can also install &lt;a href="https://sublime.wbond.net/"&gt;Package Control&lt;/a&gt;, which gives you point-and-click menu options from inside Sublime.  If you have Package Control installed, you can just do Sublime Text 2 &amp;gt; Preferences &amp;gt; Package Control &amp;gt; Install Packages, and click the name of the package you want.  (This works for all ST2 plugins that have been made public on the Package Control website.  Line-by-line is not there.  Yet.)  &lt;/p&gt;
&lt;h4&gt;How do I write a Sublime plugin?&lt;/h4&gt;
&lt;p&gt;I'm planning to write another post about this soon, because I found the documentation to be kind of scattered.  The gist of it is that you write some Python (for what you want your thing to do) and some JSON (for defining keyboard shortcuts and other menu-ish things).  Being able to write/understand little extensions like this is one of the reasons I'm glad I spent a bunch of time with Python this summer.  Anyway, stay tuned!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Tue, 13 Aug 2013 12:14:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-08-13:sublime-plugin.html</guid></item><item><title>links/cheatsheets galore</title><link>http://alyssafrazee.com/linkscheatsheets-galore.html</link><description>&lt;p&gt;Here are some great pages I've found myself referring to a lot in the
past few weeks, or pages I want to remember (without bookmarking, since
I never look at my bookmarks).  I'm collecting them here so I can have a
somewhat reasonable number of tabs open in my browser at one time.
 (Things are getting insane at the moment).  They've helped me, so maybe
they'll help you too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown basics&lt;/a&gt; - useful for writing README.md 's for github
    repos, among many other things: &lt;/li&gt;
&lt;li&gt;&lt;a href="http://guides.macrumors.com/Image:224px-Mac_keyboard_symbols.jpg"&gt;Mac keyboard shortcut symbols&lt;/a&gt; - I never know what those crazy
    characters mean.  This is what they mean.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.google.com/chrome/answer/165450?hl=en"&gt;Chrome keyboard shortcuts&lt;/a&gt; - I have now successfully been able to
    navigate between Sublime, Terminal, and two separate Chrome tabs
    without using my mouse.  AWESOME. (The above link is for Mac;
    &lt;a href="https://support.google.com/chrome/answer/157179?hl=en"&gt;this&lt;/a&gt; is the link for Windows).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;A good git workflow&lt;/a&gt; - I haven't read this through but would
    really like to, since I need a more structured way of coding,
    committing, and pushing to github&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mxcl.github.io/homebrew/"&gt;Homebrew&lt;/a&gt; - easy software installation for OS X!  yeah!  I
    finally got wget properly installed thanks to this magical world.
     And if something fails, you can start with "brew doctor" as a way
    to find the problem.  &lt;/li&gt;
&lt;li&gt;I installed &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text 2&lt;/a&gt; the other day (a really
    beautiful/powerful text editor), and then I decided to try out
    &lt;a href="https://github.com/wuub/SublimeREPL"&gt;SublimeREPL&lt;/a&gt; for running code right there in Sublime.  I didn't
    want to lose the link to the SublimeREPL documentation, so it's
    here.  So far I think SublimeREPL is okay, but there are a few
    things I don't like, or maybe just haven't figured out yet: (1) I've
    had problems importing my libraries (i.e., if I'm in a folder with a
    script thelibrary.py, and I type import thelibrary.py, it complains
    that it can't find thelibrary).  (2) I haven't been able to ctrl-C
    or ctrl-D to escape functions while they're being evaluated.  (3)
    sometimes the syntax highlighting in the REPL is annoying - e.g.,
    there will be big strips of bright pink at the end of certain lines.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3schools.com/tags/ref_httpmethods.asp"&gt;An intro to HTTP&lt;/a&gt; - I'd love to read this soon, since I've
    started to do a bit of web development&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Flask mega tutorial&lt;/a&gt; - I'm working through this right now&lt;/li&gt;
&lt;li&gt;&lt;a href="http://statuscode.org/"&gt;statuscode&lt;/a&gt; - news for programmers!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;more to come!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 27 Jun 2013 11:15:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-06-27:linkscheatsheets-galore.html</guid><category>hacker school</category><category>technical</category></item><item><title>hacker school: day 11</title><link>http://alyssafrazee.com/hacker-school-day-11.html</link><description>&lt;p&gt;Today is the 11th official day of my summer at &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt;.  It.
is. awesome.  By day, I get to surround myself with great people and
work on &lt;em&gt;whatever project I want&lt;/em&gt;.  Seriously, no rules.  It's been so
easy to get in the zone: I start coding and lose track of time, in the
best way.  And if I get sick of coding, there are other great things to
do, like help other people with their code, go to little
student-organized working groups, get a book from the Hacker School
library and do some reading, or pair with another person on his or her
project.  Or I can take my code to one of the eight gazillion experts
here and have them review it - I've done this a couple of times and I
already feel like I know how to write neater code than I wrote a month
ago.  I really love it here - it's so awesome to go to "work" in the
morning and be able to work on whatever whims and fancies occur to me,
as long as they are sort of programming-related.  (And honestly, a lot
of my whims and fancies are programming-related.  Nerd alert.)&lt;/p&gt;
&lt;p&gt;And by night, I get to explore New York City!!!!!!  More on that later.&lt;/p&gt;
&lt;p&gt;For these first few weeks, I've been having a blast coding up my
favorite game, &lt;a href="http://bit.ly/10Ax0SL"&gt;500&lt;/a&gt;, in both R and python, which is a surprisingly great exercise.  It lends itself well to object-oriented stuff, and the
logic is totally sensible but complex enough to make the implementation
a fun project.  I've also been working through the &lt;a href="http://www.matasano.com/articles/crypto-challenges/"&gt;Matasano Crypto
Challenges&lt;/a&gt;, because cryptography is awesome, and because it's nice to
have little self-contained problems to work on, and because it's another
fun way to improve my python skillz.  Also, they're based on real-world
security problems, so the application is interesting and relevant.  I'm
almost through number 6 (of 48...).  &lt;em&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm storing all of my Hacker School code and notes in my &lt;a href="https://github.com/alyssafrazee/hackerschool"&gt;hackerschool
github repo&lt;/a&gt;.  You can source and play my 500 game, but sadly I can't
post my solutions to the crypto challenges (it's against their rules).
 To make up for it, I've been keeping a little journal of sorts about my
experiences with them in the README.md file :) &lt;/p&gt;
&lt;p&gt;It's already day 11 and I don't have a Big Summer Project With A
Deliverable that I'm working on at the moment.  However, I think I would
like to study a bit of web development - I'm excited about making
software that non-programmers/non-statisticians can use, and that
definitely involves making some kind of user interface.  I've dipped my
pinky toe in these waters with things like &lt;a href="http://www.rstudio.com/shiny/"&gt;shiny&lt;/a&gt; (for R) and &lt;a href="http://d3js.org/"&gt;d3&lt;/a&gt;
(for JavaScript, which I don't know), but I've never actually jumped in
and made anything with these, and I'd like to figure out how to make
things that aren't necessarily focused on data analysis.  To be clear, I
think data analysis is awesome and I want to be some kind of data
scientist someday, but there are so many other cool tools to be made.
 People casually throw out software ideas all the time:  "I wish I could
&lt;a href="http://techpp.com/2011/06/09/block-distracting-websites/"&gt;block certain websites&lt;/a&gt; during my study times", "I wish there were a
better to-do-list app than Google Tasks, I want to categorize my to-do
list",  "I wish I could automate the process of checking whether my
dissertation committee follows the school's rules", "I wish there were
software that would turn people's crappy slides into good slides", "I
wish there were a bot that would to search Craigslist for me and email
me with promising ads" -- people have mentioned &lt;em&gt;all &lt;/em&gt;these ideas to me
in the past few months.  The thing about being at Hacker School is that
you start to believe anything's possible...all I'd need is a little bit
of ______, and I could definitely make that with a [language I
already know] backbone.  I've been feeling like "all I'd need is some
practice doing web development, and I could definitely make some of this
software wtih R/python/HTML/CSS."  So we'll see what happens!  Stay
tuned for Alyssa's Awesome Web App.  (Now I'm accountable.)&lt;/p&gt;
&lt;p&gt;Also, New York.  NEW YORK IS SO COOL.  For reference, I'm living in
central Brooklyn and working in lower Manhattan.  I've been here for
just under 3 weeks, and I haven't been above 34th Street (!) so I have a
LOT left to explore.  But &lt;em&gt;based on these three weeks&lt;/em&gt;, here are my New
York thoughts.&lt;/p&gt;
&lt;p&gt;THINGS I LIKE ABOUT NYC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;amazing food&lt;/li&gt;
&lt;li&gt;bagel sandwiches&lt;/li&gt;
&lt;li&gt;parks everywhere&lt;/li&gt;
&lt;li&gt;you can totally eat on the subway&lt;/li&gt;
&lt;li&gt;sublime coffee and espresso&lt;/li&gt;
&lt;li&gt;I can ride a subway "home" from "work" that goes over the East River
    (above ground) and watch Manhattan twinkle in the twilight&lt;/li&gt;
&lt;li&gt;sweet concerts/events/secret science club meetings happen all the
    time&lt;/li&gt;
&lt;li&gt;you can get &lt;a href="http://www.amplehills.com/"&gt;vanilla malted ice cream in a pretzel cone&lt;/a&gt;.  no
    biggie.&lt;/li&gt;
&lt;li&gt;etc. (to be continued)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;THINGS I DO NOT LIKE ABOUT NYC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Yankees&lt;/li&gt;
&lt;li&gt;smells vaguely of trash sometimes&lt;/li&gt;
&lt;li&gt;a guy looked me in the eye and threw his nasty garbage in my
    shopping bag in the subway station last week.  &lt;em&gt;what is that
    about?!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, some pictures! &lt;/p&gt;
&lt;p&gt;One time we went to Washington Square Park after work to eat ice cream,
and it looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="http://alyssafrazee.files.wordpress.com/2013/06/wash_square_park.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Another time, my friend &lt;a href="http://mandymejia.wordpress.com/"&gt;Mandy&lt;/a&gt; came to visit - it was a beautiful
day, and we went to the Hudson River Park!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="http://alyssafrazee.files.wordpress.com/2013/06/mandy.jpg?w=650" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="http://alyssafrazee.files.wordpress.com/2013/06/hudson_river_park.jpg?w=650" /&gt;&lt;/p&gt;
&lt;p&gt;The tallest shiniest building in that last picture is the new World
Trade Center - one of four planned.&lt;/p&gt;
&lt;p&gt;Mandy and I also went to the &lt;a href="http://www.thehighline.org/"&gt;High Line&lt;/a&gt;, which we really enjoyed -
the High Line is this park that's built on an old railroad track that
runs about a story above the streets of NYC, over neighborhoods like
Chelsea and the Meatpacking District.  She insisted on taking this
picture of me while we were having dinner there:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="http://alyssafrazee.files.wordpress.com/2013/06/terroir.jpg?w=650" /&gt;&lt;/p&gt;
&lt;p&gt;And here is a picture of the street I live on.  I don't live in one of
these (I'm a few blocks over, where the brownstones are less brown), but
I enjoyed the picturesque-ness of this area.  Plus it was a great
opportunity to use instagram's vintage-y filters.  So artsy ;) &lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="http://alyssafrazee.files.wordpress.com/2013/06/brownstones.jpg?w=650" /&gt;&lt;/p&gt;
&lt;p&gt;stay tuned for updates!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Wed, 19 Jun 2013 16:07:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-06-19:hacker-school-day-11.html</guid><category>hacker school</category></item><item><title>summer 2013: Hacker School!</title><link>http://alyssafrazee.com/summer-2013-hacker-school.html</link><description>&lt;p&gt;Hello from New York!&lt;/p&gt;
&lt;p&gt;Tomorrow morning, my summer adventure begins: I'm a student in the
summer 2013 batch of &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt;!  Basically, Hacker School is
three months of learning about programming, in a
bring-your-own-project-ideas-or-enthusiasm, collaborative, friendly,
flexible, awesome environment.  I haven't actually been yet, so that's
my one-sentence interpretation of what it is based on the website, and
from my three Skype sessions with facilitators (so definitely check out
the website if you want to know more).&lt;/p&gt;
&lt;p&gt;I'm really excited about this, for many reasons.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'm guessing I'll meet some amazing, smart, friendly, enthusiastic
    people who like learning stuff, which I look forward to because I'm
    pretty passionate about learning stuff too, and I really like
    meeting people who share that passion.  &lt;/li&gt;
&lt;li&gt;I really like coding/programming, but rarely have the time during
    research to think very hard about the best way to program my methods - it seems like getting the results quickly is always more important
    than getting the results in the optimal, most organized, most
    efficient way.  I figure that practicing programming will make it
    easier to write good code faster.  This is becoming a huge challenge
    for statisticians, since new statistical methods are being deemed
    &lt;a href="http://simplystatistics.org/2013/01/23/statisticians-and-computer-scientists-if-there-is-no-code-there-is-no-paper/"&gt;useless without good software&lt;/a&gt; -- so I'm excited to really dig
    in to coding!&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://www.hackerschool.com/blog/17-peter-norvig-and-eight-others-are-hacker-school-residents"&gt;pretty famous people&lt;/a&gt; are going to be at Hacker School...I'm
    a little star struck.  I'm beyond excited to meet them, and also to
    meet my fellow students and the facilitators.  (I just like &lt;em&gt;meeting
    people!!!&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;I get to live in New York for three months.  So pumped.  I know, I
    know, there's no air conditioning, washers/dryers, or space in any
    of the apartments I can afford (I mean seriously, the shower in my
    current place is shaped like a triangle, and my roommates tell me
    it's totally normal if the curtain just falls down after you
    shower...) but the food is delicious, the public transit is so good,
    and it's very leafy.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've been interested in learning JavaScript for a while, mainly because
of a pretty &lt;a href="http://healthvis.org/"&gt;neat tool&lt;/a&gt; that some of my friends/colleagues developed
for interactive data visualization, using d3. So, one of the Hacker
School facilitators recommended starting by reading the book &lt;a href="http://eloquentjavascript.net/"&gt;Eloquent
JavaScript&lt;/a&gt;.  It's free and it's actually delightful to read (I've
chuckled out loud several times in the first few chapters).  So that's
where I'll be starting tomorrow!&lt;/p&gt;
&lt;p&gt;Keep an eye out for more Hacker School/New York musings this summer!
 AND ALSO, if you have ideas for useful software projects, I (and I
suspect my fellow Hacker Schoolers) would love to hear them.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Sun, 02 Jun 2013 23:08:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-06-02:summer-2013-hacker-school.html</guid><category>hacker school</category></item><item><title>Ideas for Super Awesome Conferences</title><link>http://alyssafrazee.com/ideas-for-super-awesome-conferences.html</link><description>&lt;p&gt;At this time last week, I was experiencing my first &lt;a href="http://enar.org/meetings.cfm"&gt;ENAR&lt;/a&gt;!  Overall I
had a great time  - met some cool people, went to some cool sessions,
hung out by the pool and went to Epcot, etc.  But as we were hanging out
over the course of the conference, I found myself in more than one
discussion with friends about how stat conferences could be so much more
awesome.  I thought to myself  last Monday: "Alyssa!  You haven't
written in your blog since Election Day.  'Ideas for Super Awesome
Conferences' would be a fabulous post!"  And then I was beaten to the
punch by &lt;a href="http://yihui.name/en/2013/03/on-enar-or-statistical-meetings-in-general/"&gt;Yihui's post on conferences&lt;/a&gt;.  Read it, it's good.  But I
have some different (and sometimes conflicting) ideas, so I decided to
write "Ideas for Super Awesome Conferences" anyway.&lt;/p&gt;
&lt;p&gt;DISCLAIMER:  I'm no expert.  I've only been to two big stat conferences
(ENAR 2013 and &lt;a href="http://www.amstat.org/meetings/jsm/2012/program.cfm"&gt;JSM 2012&lt;/a&gt; in San Diego).  I'm a TOTAL CONFERENCE
NEWBIE (since I'm a third-year student).  Also, I have also never
planned a conference so I most likely have no idea what goes in to such
a huge endeavor.  Bearing this in mind...&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Ideas for Conference
Organizers&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span style="line-height:13px;"&gt;&lt;strong&gt;(1)&lt;/strong&gt; Choose a good venue.  This is
probably the first thing that happens after the city is chosen, so I'm
sure a lot of thought goes in to this, but the venue at ENAR left a lot
to be desired.  For one thing, the conference was held in a giant
conference-center/hotel megacomplex with pretty much &lt;em&gt;nothing &lt;/em&gt;outside
the complex.  This meant:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="line-height:13px;"&gt;there weren't really any options for
    food except for the megacomplex restaurants, which all served the
    same food and charged \$14 for chicken fingers (which is either a
    totally ridiculous thing to submit for reimbursement, if you're
    lucky enough to have that, or a totally outlandish way to spend your
    graduate student stipend)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;There was one convenient hotel choice, so if you missed the February
    15 deadline for booking a room, wanted a cheaper option, or wanted
    to rack up your hotel rewards points for some other chain, or
    anything like that, you had to stay in a hotel at least a few
    non-walkable miles from the conference center.  The solution to this
    was I guess to just stay in the conference hotel (which is where I
    was, and it was convenient and nice), but then I realized on Tuesday
    that I hadn't been outside in three days that that made me sad.&lt;/li&gt;
&lt;li&gt;Evening activities were limited to whatever was in the megacomplex,
    unless you wanted to spring for a several-mile cab ride.  (We did
    get bused to Epcot, which totally rocked except for the fact that we
    only got to stay for a couple of hours, most of which were spent
    eating dinner.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also found it somewhat hilarious that the conference material plugged
the venue by saying that this conference center has the "largest
pillar-free resort ballroom" in the country (which is oddly specific,
but whatever) - and then saying that ENAR wouldn't actually
be &lt;em&gt;using &lt;/em&gt;this ballroom but that we were free to go take a look at it!
 Okay...&lt;/p&gt;
&lt;p&gt;Anyway, my ideal venue would be located within walking distance of
several hotels, restaurants, bars, convenience or grocery stores, etc -
the key to me is &lt;em&gt;having options&lt;/em&gt;.  I think this is where Yihui and I
diverge a little bit, because I don't think a college campus like Iowa
State would be a good place to have a conference at all.  For one thing,
most college dorms are occupied with college kids during the school
year, so the whole dorm option seems unlikely, and if you're in a
small-ish town with limited hotel space (like Ames, or like the small
town I went to college in), it just won't be possible to fit all the
participants in. For another, I don't think forced interaction between
participants because there's literally nothing else to do is very
healthy - I've found that having somewhere to go (an interesting
restaurant or bar) is a fun way to socialize/network with people you've
just met.  It takes away some of the tension.  Also, Ames is 41 miles
from the nearest major airport - I know that's specific to Iowa State,
but it's true for a lot of more rural universities, and I think it would
be a major inconvenience.  For an example of a venue I really liked,
take last summer's JSM in San Diego - nice conference center, many hotel
choices, good food around, the beach was accessible by public transit...&lt;/p&gt;
&lt;p&gt;Also, the venue should have good wifi.  Accessible within the entire
conference center, including the session rooms (in case presenters need
to upload their slides from Dropbox because their favorite flashdrives
mysteriously went missing the day before they needed to leave and their
backup flashdrives suddenly decide to be "malformed" or whatever.  Not
that this happened to anyone I know...).  The cost of such wifi could
probably be included in the registration fee.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)  &lt;/strong&gt;Have a conference app!  It's 2013.  We work in a tech-y field.
 Lots of people have smartphones and would use the app.  It would
include most of what is in the printed program (which would solve the
excessive program-printing problem) in addition to a scheduler - so you
could plan out the talks/sessions you want to go to that day (thanks to
my friend &lt;a href="http://biostat.jhsph.edu/~jmuschel/"&gt;John&lt;/a&gt; for this idea, which I LOVE).  It could also include
things like a live twitter feed, an "announcement area" for room changes
and lost-and-found issues and whatnot, and some of the social networking
features that Yihui was talking about (e.g., search for participants by
name or by university, so you could see whether anyone you know from
years ago will be coming).  This app could probably get made cheaply and
quickly if it were a contest (in a word: crowdsource!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) &lt;/strong&gt;Like Yihui said, have the nametags be printed front and back.
 Such a good, simple idea.  Also, potentially ask for first and last
names in separate boxes on the registration form...my friend got a
printed badge that said her last name in giant letters instead of her
first name, which was kind of hilarious and also kind of unfortunate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4)  &lt;/strong&gt;Think carefully about placement of the poster session, because
it's often hard to get people to go to that part of the conference.  I
had a couple discussions about this.  I tend to agree with &lt;a href="http://www.biostat.wisc.edu/~kbroman/"&gt;Karl&lt;/a&gt;, who
suggested having it as the only thing happening during an afternoon
session in the middle of the conference.  This way: everybody's around.
 They've all arrived and they aren't leaving yet.  (The one at this
conference was Sunday night - the first day - so a lot of people weren't
there yet).  Nobody has another session they really wanted to be at that
conflicts with it.  I talked a little more about it with &lt;a href="http://www.biostat.jhsph.edu/~tlouis/"&gt;Tom&lt;/a&gt;, a
conference vet who says that people still don't really go if it's
scheduled like that.  All I'll say is this:  even if it's in the
afternoon, have food and drinks.  Kind of a happy hour situation.  Maybe
not open bar, but cash bar would be awesome (though a beer should cost
less than \$11...).  And advertise the happy hour nature of the session.&lt;/p&gt;
&lt;p&gt;Now, the responsibility making a conference awesome does not fall only
on the shoulders of the organizers....&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Ideas for Conference
Participants&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I really only have one, and it's this.  &lt;strong&gt;Give a great talk.  &lt;/strong&gt;I know
not everyone likes giving talks, but either someone thought you'd do a
good job and that you have interesting work (invited sessions) or you
thought your work was worth sharing (contributed sessions), so in either
case, you kind of owe it to the attendees to at least &lt;em&gt;try&lt;/em&gt; to engage
them in your research.  The ability to clearly communicate your research
is an integral part of being a good scientist, I think, so it's part of
the job, and conferences are a good way to practice this.  ENAR actually
puts out a &lt;a href="http://enar.org/presentationguidelines.cfm"&gt;list of guidelines for giving an effective presentation&lt;/a&gt;!
 The most engaging talks I've seen have these qualities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="line-height:13px;"&gt;They stay in the time limit
    &lt;em&gt;comfortably,&lt;/em&gt;so the presenter isn't completely rushed.
     The 1-slide-per-minute guideline seems to work surprisingly well
    for me.  (This means that if I see that "1/40" footer on Beamer
    slides at the beginning of your 15-minute talk, I will inwardly shed
    a tiny tear)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;They explain the big picture well, but might leave out some details.
     I think this is awesome because then if people are intrigued by the
    general idea, they'll ask the speaker afterward about the details.
     If people are confused about the concept, they kind of just forget
    about it and move on to listening to the next talk.  Leaving out
    details is a great way to stay within the time limit.&lt;/li&gt;
&lt;li&gt;They practice their talk at least once.  Maybe they even invite
    someone to listen - someone who knows stuff, but doesn't know about
    their research.  Then they'll be able to tell whether their talk is
    appropriately timed, or whether they've left out too many details.
    (This actually just what I try to do - but I like to imagine that
    I'm not a crazy person and that my favorite speakers also practice
    their talks.)&lt;/li&gt;
&lt;li&gt;They use slides to &lt;em&gt;remind&lt;/em&gt;them what to talk about rather than
    to &lt;em&gt;tell &lt;/em&gt;them.  Which means they don't &lt;em&gt;read slides full of text as
    they point at the words they are reading with a laser pointer&lt;/em&gt;.  The
    "reminder slides" are usually diagrams or pictures.&lt;/li&gt;
&lt;li&gt;They tell a joke or two (Yihui mentioned this in his post and
    actually told jokes at his talk, which I really appreciated.  My
    favorite quote of his was something along the lines of "I included
    some funny stuff in here.  I'm sorry if it offends you.  You may
    think this is not ENAR."  Ha!  But the larger point is that &lt;em&gt;having
    a joke in your presentation absolutely should not make it
    un-ENAR-like!  &lt;/em&gt;That's just sad!  Statistics is fun!  We should be
    able to laugh about it!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd be super pumped to go to a stat conference in a cool city with a
sweet app, a happy hour poster session, and some really awesome talks -
keeping my fingers crossed!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Mon, 18 Mar 2013 17:42:00 -0400</pubDate><guid>tag:alyssafrazee.com,2013-03-18:ideas-for-super-awesome-conferences.html</guid></item><item><title>Merry Statistician's Christmas!</title><link>http://alyssafrazee.com/merry-statisticians-christmas.html</link><description>&lt;p&gt;My advisor told me today, in a fit of excitement and enthusiasm, that
"the real winners in this election were statisticians."  (He later went
on to joyfully declare, "Man, I LOVE being a statistician!"  The guy is
living the dream.)  According to him, today is statistician's Christmas.
 What a great metaphor!  Check it out: all year long, we predict and
model and analyze and see if we can figure out what will happen.
 Everything goes down on Tuesday night, and we wake up Wednesday morning
to the best gift of all: the real data.  And this lets us figure out how
well our models and predictions and analyses did.&lt;/p&gt;
&lt;p&gt;This year, the stat nerds did awesome.  Nate Silver (of
&lt;a href="http://fivethirtyeight.blogs.nytimes.com/"&gt;fivethirtyeight&lt;/a&gt;) is Mr. Popular in geek circles right now.  Should
Florida officially go Obama, he will have predicted every state's vote
correctly.  That's really hard to do, since so many factors influence
how people vote and not all of them are measurable, but man, he and some
other awesome people &lt;a href="http://simplystatistics.org/post/35187901781/nate-silver-does-it-again-will-pundits-finally-accept"&gt;rocked it&lt;/a&gt;.  Check out this &lt;a href="https://twitter.com/search?q=%23natesilverfacts&amp;amp;src=typd"&gt;amazing Twitter
hashtag&lt;/a&gt; it spawned. &lt;/p&gt;
&lt;p&gt;It's also kinda cool to look at the data visualization stuff that comes
after elections.  I "watched" a lot of the election coverage on
&lt;a href="http://elections.huffingtonpost.com/2012/results"&gt;Huffpost&lt;/a&gt; - their &lt;a href="http://elections.huffingtonpost.com/2012/results/minnesota"&gt;state-by-state graphics&lt;/a&gt; were really nice.  I
liked the interactive parts - e.g., how hovering over a dot on the
county scatterplot told you which county it was.  On another note, the
main way we visualize US election data is with the results map, where
states are colored red if they went Republican and blue if they went
Democrat.  This caused my roommate (who isn't from the US) to comment
"That map is looking pretty red...Romney must be winning?"  And that's
the problem with the election map - big, unpopulated, 3-vote states are
usually red.  &lt;a href="http://www.npr.org/blogs/itsallpolitics/2012/11/01/163632378/a-campaign-map-morphed-by-money"&gt;NPR did some fun stuff&lt;/a&gt; that addressed this issue by
making the sizes and colors of states on the map a bit more informative.&lt;/p&gt;
&lt;p&gt;So, merry stat-mas to all!  Enjoy the peace and quite of the &lt;a href="http://www.youtube.com/watch?v=OjrthOPLAKM&amp;amp;feature=related"&gt;election
being over&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 08 Nov 2012 04:17:00 -0500</pubDate><guid>tag:alyssafrazee.com,2012-11-08:merry-statisticians-christmas.html</guid></item><item><title>working interactively on a remote computer</title><link>http://alyssafrazee.com/working-interactively-on-a-remote-computer.html</link><description>&lt;p&gt;In my &lt;a href="http://alyssafrazee.wordpress.com/2012/08/23/hello-world/"&gt;software/hardware setup post&lt;/a&gt;, I talked a little bit about
working on a remote machine.  As promised, here are the details about
how I make interactive coding easy for me.&lt;/p&gt;
&lt;p&gt;Let's start from the very very beginning.  Our department has a pretty
sweet set of really powerful computers ("the cluster") available for us
to use.  Because the computers are so awesome, they have to be kept in a
room that is specially cooled and maintained, and they don't have
desktops that we can sit down and interact with.  As such, you need to
use a different computer (i.e., a laptop) to remotely log in to the
cluster and either (a) start an interactive session, in which you can
type commands into the Linux shell, or open up an interactive version of
(say) R or python and type commands there, or (b) submit a batch job or
shell script to run without user interaction.&lt;/p&gt;
&lt;p&gt;Batch jobs and scripts are pretty straightforward, so I'm not going to
yammer on about that in this post.  But working interactively is a
little trickier, mostly because it's good practice (in the name of
reproducible research, scientific integrity, and organization) to keep a
record of the commands you run to get your results.  If you get results
interactively on the remote machine, there's not a built-in way to do
this.  But never fear!  Software and shortcuts exist that allow you to
save a script on your local computer, but run each line of that script
interactively on the remote machine.  Since statisticians like me
usually do most interactive work in &lt;a href="http://www.r-project.org/"&gt;R&lt;/a&gt;, I'll describe here how I run
a local R script interactively on the cluster.&lt;/p&gt;
&lt;p&gt;I'm currently a Mac user, so my main tool for this purpose
is &lt;a href="http://aquamacs.org/"&gt;Aquamacs&lt;/a&gt;.  This is basically a version of an &lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; text
editor.  My opinion on Emacs is that it's a really powerful tool, but
requires a lot of customization to access all that power, and it has
pretty funky keyboard shortcuts.  Aquamacs allows you to use either
Emacs keyboard shortcuts OR common Mac keyboard shortcuts (e.g.,
command-Z for undo) in an Emacs session, which I find really useful.
 Aquamacs makes use of &lt;a href="http://ess.r-project.org/"&gt;ESS&lt;/a&gt; (Emacs Speaks Statistics) when
interacting with R.&lt;/p&gt;
&lt;p&gt;So let's get to the point: here are the steps!&lt;/p&gt;
&lt;p&gt;​(1)  Install Aquamacs.&lt;/p&gt;
&lt;p&gt;​(2)  Open your local R script inside Aquamacs.&lt;/p&gt;
&lt;p&gt;​(3)  Type &lt;strong&gt;M-x shell&lt;/strong&gt; (M means escape key), which will basically open
up a Terminal window inside Aquamacs.  (Once you hit M-x, you won't be
typing in the R script anymore, but will see your stuff appear at the
bottom of the window).&lt;/p&gt;
&lt;p&gt;​(4)  In the Terminal window that just opened up, log in to the remote
machine. (I'm making the assumption here that the login process to the
remote machine involves some variant of an "ssh" command in the
terminal.)&lt;/p&gt;
&lt;p&gt;​(5)  Click &lt;strong&gt;Window &gt; Move tab to new frame&lt;/strong&gt;.  The terminal window
will slide over to the other side of your computer, so you're now seeing
the R script and the prompt of the remote machine simultaneously.&lt;/p&gt;
&lt;p&gt;​(6)  Start R on the remote machine.&lt;/p&gt;
&lt;p&gt;​(7)  Staying in the remote-machine-R window, type &lt;strong&gt;M-x ess-remote&lt;/strong&gt;.
 You'll then be prompted for a dialect - type &lt;strong&gt;r &lt;/strong&gt;- the line
"options(STERM='iESS')" will have been run inside your R session.&lt;/p&gt;
&lt;p&gt;​(8)  Move back to the local R script.  You can now run line-by-line on
the remote machine either using &lt;strong&gt;control-n&lt;/strong&gt; to run just the current
line, or using &lt;strong&gt;control-r &lt;/strong&gt;to run a block of highlighted lines.&lt;/p&gt;
&lt;p&gt;This has worked pretty well for me, but I am definitely interested in
hearing others' ideas if someone knows of a more efficient way to do
this from a Mac.  I use Aquamacs almost exclusively for this, which
feels a little like using a sledgehammer for a tiny little nail, since
I'm not really harnessing all the power of Aquamacs/Emacs or using it
for any of its other intended purposes, and I haven't put a lot of time
into customizing it.  But it does get the job done, and it's definitely
better than the ol' copy-paste trick.&lt;/p&gt;
&lt;p&gt;I'm incredibly happy with my Macbook (it's a delightfully fast,
beautiful, efficient computer), but I really really miss &lt;a href="http://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt;,
the best text editor I've ever known - it's Windows-only.  Running
interactively on a PC is smoother than the Mac workflow I described
above: it basically involves (1) logging into the remote machine using
something like &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"&gt;PuTTY&lt;/a&gt; and opening R, (2) opening up your local R
script in Notepad++, and (3) hitting F9 to run a line or highlighted set
of lines.  So much more elegantly simple!  Something for Mac software
developers to aspire to, I suppose...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 25 Oct 2012 23:20:00 -0400</pubDate><guid>tag:alyssafrazee.com,2012-10-25:working-interactively-on-a-remote-computer.html</guid></item><item><title>the power of the default</title><link>http://alyssafrazee.com/the-power-of-the-default.html</link><description>&lt;p&gt;Our tendency to stick with what's right in front of us
is &lt;a href="http://en.wikipedia.org/wiki/Status_quo_bias"&gt;well-documented&lt;/a&gt;.  (I know it's Wikipedia, but check out the fat
list of references and further reading!).  I was at a lecture on obesity
a few weeks ago, and I learned that in 2006, Disney World's fast food
places changed the kids' meal default sides to carrots and milk (rather
than french fries and pop) - and the majority of people&lt;em&gt; actually got
the carrots and milk&lt;/em&gt;, even though fries are way tastier and are still
available if you ask for them. &lt;a href="http://www.whitehouse.gov/the-press-office/2012/06/05/first-lady-joins-walt-disney-company-announce-new-standards-food-adverti"&gt;Michelle Obama was pleased&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think we can harness the power of the default.  I'm talking about
something on a slightly smaller scale than the national obesity
epidemic.  I'm talking about the problem of really terrible academic
talks.  As most of my school friends can attest, I'm pretty opinionated
when it comes to talks.  I'm really impressed when someone gives a good
presentation, and I'm irked every time someone shows up and reads their
slides (full of bullet points and equations) to a room full of smart,
literate people - &lt;em&gt;WHY OH WHY!? &lt;/em&gt; There is so much advice out there on
how to give a good talk.  It's &lt;a href="http://lmgtfy.com/?q=giving+a+good+research+talk"&gt;absurdly easy to find&lt;/a&gt;.  So what
gives?  I think a major part of the problem is PowerPoint's default.&lt;/p&gt;
&lt;p&gt;That sounds so simple, but I seriously believe that if PowerPoint's
default slide layout was "blank slide" rather than "header and bullet
point box," the overall quality of presentations worldwide would
increase significantly.  People wouldn't be initially prompted, over and
over, to fit their research into a bullet-point framework. People would
feel freer to add pictures, graphs, schematic diagrams, videos, etc etc,
if that bullet point box wasn't cramping their style.  With less text on
slides, people might run through their talk once or twice before giving
it, just to make sure they know what they're saying and that they aren't
going over time.&lt;/p&gt;
&lt;p&gt;Don't underestimate the power of the default.  I think it could do
magical things for the academic and business world.&lt;/p&gt;
&lt;p&gt;p.s.  http://lmgtfy.com/ - "let me google that for you."  So hilariously
snarky.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Fri, 21 Sep 2012 18:06:00 -0400</pubDate><guid>tag:alyssafrazee.com,2012-09-21:the-power-of-the-default.html</guid></item><item><title>failure, grit, and big thinking</title><link>http://alyssafrazee.com/failure-grit-and-big-thinking.html</link><description>&lt;p&gt;Last fall, I read an article in the New York Times called "&lt;a href="http://www.nytimes.com/2011/09/18/magazine/what-if-the-secret-to-success-is-failure.html?pagewanted=all"&gt;What if the
Secret to Success is Failure?&lt;/a&gt;"  It's a pretty long read, but I really
enjoyed it.  The article centers around Dominic Randall, headmaster of a
New York City private K-12 school, and a few other prominent figures who
thought hard about what qualities are most important for students'
success in school and how to teach and develop those qualities in their
students.&lt;/p&gt;
&lt;p&gt;They were figuring out how to predict student success in high school and
college, but I have no trouble believing that that the conclusions and
findings presented in the article probably extrapolate immediately to
graduate school success.  The question was "what kinds of people succeed
in academic situations that are extremely challenging, often to the
point of discouraging?"&lt;/p&gt;
&lt;p&gt;What they came up with as the answer was...inspiring.  Their list of the
qualities necessary to really succeed was as follows: &lt;strong&gt;zest, grit,
self-control, social intelligence, gratitude, optimism and curiosity.
 &lt;/strong&gt;I call this list "inspiring" mostly because of what
it &lt;em&gt;doesn't&lt;/em&gt; contain:  competitiveness, supergenius IQ, hardness...the
qualities of the uber-smart but really intimidating people I've met and
don't ever feel like I can measure up to.  But no -- the big-thinking
educators and psychologists mentioned in the article found other
qualities more important.  Qualities I've found and really value in
people I deeply respect.  Qualities that show "character is at least as
important as intellect." Zest, grit, self-control, social intelligence,
gratitude, optimism, curiosity.  The kinds of people that have those
qualities are the kinds that succeed.&lt;/p&gt;
&lt;p&gt;The most discussed quality on that list (and I believe the one that gave
the article its title) was &lt;strong&gt;grit&lt;/strong&gt;, described as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"a passion for a single mission [combined] with an unswerving
dedication to achieve that mission, whatever the obstacles and however
long it might take."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So grit is mostly developed through failure. It's hypothesized that kids
who have never failed, who haven't really faced obstacles, who have
&lt;em&gt;always&lt;/em&gt; been told "great job!", never develop one of the key elements
to success: grit.&lt;/p&gt;
&lt;p&gt;But...that means that the most successful academics - the ones with
zest, grit, self-control, social intelligence, gratitude, optimism,
curiosity, the ones I look up to - developed grit at some point.  They
failed at some point.  They FAILED!  This was such an eye-opening
realization to me.  Even the best fail.  A lot.  Most successful people
I've met don't really advertise their failures, but I think (at some
point) they should.  For example: My advisor wrote a whole public &lt;a href="http://simplystatistics.org/post/29067196398/a-non-exhaustive-list-of-things-i-have-failed-to"&gt;blog
post on his failures&lt;/a&gt;, which I thought was awesome.  When smart,
successful people share their setbacks, it teaches students that if you
fail at something, it (a) doesn't mean you're not smart enough, (b)
doesn't mean you'll never be successful, and (c) doesn't mean you should
give up or play it safe.  It just means you have to stay motivated, stay
confident, and figure something else out.&lt;/p&gt;
&lt;p&gt;Then the question becomes this:  how do people develop those traits?
 Are they personality traits?  Should they somehow be taught?  (One of
the main topics of the NYT article was how the school should go about
developing kids' character).  When you're in your 20s, how do you work
on developing your character?  I don't really have answers.  I have some
ideas - ideas that I don't implement perfectly, but that I think would
help develop zest, grit, self-control, social intelligence, gratitude,
optimism, and/or curiosity:&lt;/p&gt;
&lt;p&gt;​(1)  Hang around people who already exhibit those traits.  Get to know
them.  If they're your peers, be friends with them.  People with zest
and gratitude and optimism and social intelligence are often really fun
people to hang out with anyway.&lt;/p&gt;
&lt;p&gt;(2).  Read.  Word on the street is that &lt;a href="http://lifehacker.com/5936493/want-to-be-a-great-leader-start-reading"&gt;successful people read a
ton&lt;/a&gt;.  Check out &lt;a href="http://www.goodreads.com/"&gt;Goodreads&lt;/a&gt; to turn reading into social networking
(a great way to get recommendations!).&lt;/p&gt;
&lt;p&gt;(3).  Work hard, play hard.  Like your work enough to spend a good
amount of time on it - enough time to try out crazy ideas (that might
fail spectacularly) and to do quality work.  And be social - build
relationships, make friends, enjoy your city.&lt;/p&gt;
&lt;p&gt;(4).  Be a big thinker.  All my favorite people in our department are
what I consider big thinkers: people who have big ideas - ideas that
sometimes seem crazy (and sometimes are), people who LOVE what they do,
people who aren't afraid to get enthused about statistics or
bioinformatics or computer science, people who proudly and loudly geek
out, people who set really lofty goals (and often don't meet them, but
accomplish significant things while trying!), people who speak up when
they have an idea or a question, people who encourage others, people who
listen to those who are smarter than them.  Be one of those people.&lt;/p&gt;
&lt;p&gt;We'll see how this goes for the rest of grad school (and beyond)!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Fri, 31 Aug 2012 18:43:00 -0400</pubDate><guid>tag:alyssafrazee.com,2012-08-31:failure-grit-and-big-thinking.html</guid></item><item><title>my software/hardware setup</title><link>http://alyssafrazee.com/software-setup.html</link><description>&lt;p&gt;Inspired by the awesome &lt;a href="http://hilaryparker.com/2012/08/16/the-setup-part-1/"&gt;Hilary Parker&lt;/a&gt; and the dawn of a new academic
year, I've put together a rundown of tools I find essential in my
day-to-day as a biostatistics graduate student.  None of this was
formally taught to me - much has been recommended, learned on the fly,
or found via the "just Google it" method - but I hope to inject some
sense of coherence into the whole situation with this post.  We thought
something like this would be especially useful for incoming students or
anybody looking to change or optimize their setup.  So let's begin!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My personal computer is a 15" MacBook Pro, which I got in October 2011.
 I was hesitant to make the switch over to the Mac (I had owned only PCs
before then), but I've never been happier with a laptop.  The work I do
on a daily basis is much better streamlined on the Mac.  However, either
platform works in our field, so I'll be sure to note when a piece of
software I discuss is Mac- or PC-specific.  The laptop is my main piece
of hardware (not counting our departmental computing cluster, which I'll
mention later) - the only other thing I'd mention is my 300GB external
hard drive, which I use to back up my computer with &lt;a href="http://support.apple.com/kb/HT1427"&gt;Time Machine&lt;/a&gt;.
 Backups are absolutely essential - I choose to use an external drive,
but backing things up in the cloud has become common practice.  I use
&lt;a href="http://www.dropbox.com"&gt;Dropbox&lt;/a&gt; (you get 2GB for free) for backing up my most important
files and for creating shared folders.  Other common cloud storage
solutions are &lt;a href="http://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt; and &lt;a href="https://www.sugarsync.com/"&gt;SugarSync&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By far, my favorite piece of software is &lt;a href="http://www.r-project.org/"&gt;R&lt;/a&gt; - every statistician's
best friend.  It rocks.  In the genomics world, most R packages are
published on &lt;a href="http://bioconductor.org"&gt;Bioconductor&lt;/a&gt;.  The R GUI on the Mac is pretty awesome,
so working with R and Bioconductor locally required almost no setup for
me.&lt;/p&gt;
&lt;p&gt;What was a bit more challenging was figuring out my R situation when
working on our departmental computing cluster - i.e., when working on a
remote machine that I've logged into from my laptop via ssh.  There are
two pieces of software I've found really useful when working remotely:
&lt;a href="http://cyberduck.ch/"&gt;Cyberduck&lt;/a&gt; (for file transfers) and &lt;a href="http://aquamacs.org/"&gt;Aquamacs&lt;/a&gt; (for running code
interactively from my machine to the cluster - Mac-specific).  I'm not
fully convinced that Aquamacs is the best way to go for the interactive
code - in fact, the thing I miss most about having a PC is the text
editor &lt;a href="http://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt;.  Notepad++ is a PC-specific editor that connects
beautifully to R (with &lt;a href="http://sourceforge.net/projects/npptor/"&gt;NppToR&lt;/a&gt; - just hit F8 to run a line in R
locally!) or to an ssh client (just hit F9 to run a line remotely!).
 However, I have a pretty good system worked out using Aquamacs and ESS
- I'll post the specifics in another post.  And, speaking of text
editors - I've come to like &lt;a href="http://www.barebones.com/products/TextWrangler/"&gt;TextWrangler&lt;/a&gt; (Mac-specific) quite a bit.&lt;/p&gt;
&lt;p&gt;For typesetting anything with more than one equation in it, I (and most
of the mathematical/statistical community) use LaTeX.  I use
&lt;a href="http://pages.uoregon.edu/koch/texshop/index.html"&gt;TeXShop&lt;/a&gt; as my frontend and &lt;a href="http://www.tug.org/mactex/2011/"&gt;MacTeX&lt;/a&gt; as my TeX distribution. This
setup works like a dream on my Mac - it's incredibly fast, and it took
NO customization to get the two features that are really important to
me: (1) automatic PDF refresh when you change your TeX code and (2) a
backward search feature where I can click on the PDF and be taken
directly to that point in the TeX code.  When I used a PC, I used
&lt;a href="http://www.texniccenter.org/"&gt;TeXnicCenter&lt;/a&gt; as my frontend and &lt;a href="http://miktex.org/"&gt;MiKTeX&lt;/a&gt; as my TeX distribution,
but I also found that I needed &lt;a href="http://blog.kowalczyk.info/software/sumatrapdf/free-pdf-reader.html"&gt;Sumatra&lt;/a&gt; (an alternative to Adobe for
reading PDFs) and some extra customization to get my two required
features.&lt;/p&gt;
&lt;p&gt;I use PowerPoint for presentations containing zero or one equation(s),
and I use Beamer (a LaTeX class) for anything with two or more
equations.  I have PowerPoint 2008, which is pretty slow on a Mac, so
I've been considering trying &lt;a href="http://www.apple.com/iwork/keynote/"&gt;Keynote&lt;/a&gt;.  (Thoughts, anyone?).  I've
also tried to get the best of both the PowerPoint and Beamer worlds
(&lt;a href="http://en.wikipedia.org/wiki/WYSIWYG"&gt;WYSIWYG&lt;/a&gt; + nice equations) by using &lt;a href="http://pierre.chachatelier.fr/latexit/latexit-home.php?lang=en"&gt;LaTeXiT&lt;/a&gt;.  There's a
PC-equivalent called &lt;a href="http://elevatorlady.ca/"&gt;Aurora&lt;/a&gt;, which I used once for 30 days until my
free trial expired.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anything else?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That's pretty much all I use on a daily basis.  I'll mention a couple
other miscellaneous things:  I'm just starting to use &lt;a href="http://github.com"&gt;github&lt;/a&gt; to
manage and share my code - git has great mechanisms for keeping track of
all the craziness that comes with doing a shared project.  Lots of
people in my department use &lt;a href="http://www.statistik.lmu.de/~leisch/Sweave/"&gt;Sweave&lt;/a&gt;, a cool way to integrate R and
LaTeX.  I am not one of those people.  Sweave is especially good for
putting together manuals, but not so good for working with analyses that
take a while to run or that need to be very specifically formatted.&lt;/p&gt;
&lt;p&gt;I'd love to hear about any setup tips that you find useful - do share!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alyssa Frazee</dc:creator><pubDate>Thu, 23 Aug 2012 20:29:00 -0400</pubDate><guid>tag:alyssafrazee.com,2012-08-23:software-setup.html</guid></item></channel></rss>